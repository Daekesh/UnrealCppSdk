// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabProxyPrivatePCH.h"
#include "PlayFab.h"
#include "PFMatchmakerAuthUser.h"

UPFMatchmakerAuthUser::UPFMatchmakerAuthUser(const FObjectInitializer& ObjectInitializer)
	: Super(ObjectInitializer)
	, SuccessDelegate(PlayFab::UPlayFabMatchmakerAPI::FAuthUserDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
	, ErrorDelegate(PlayFab::FPlayFabErrorDelegate::CreateUObject(this, &ThisClass::OnErrorCallback))
{
}

UPFMatchmakerAuthUser* UPFMatchmakerAuthUser::AuthUser(UObject* WorldContextObject, class APlayerController* PlayerController , const FString& InAuthorizationTicket)
{
	UPFMatchmakerAuthUser* Proxy = NewObject<UPFMatchmakerAuthUser>();
 	//Proxy->PlayerControllerWeakPtr = PlayerController;
	Proxy->Request.AuthorizationTicket = InAuthorizationTicket;
	

 	//Proxy->WorldContextObject = WorldContextObject;
	return Proxy;
}

void UPFMatchmakerAuthUser::Activate()
{
	// grab the module, so we can get a valid pointer to the client API 
	PlayFabMatchmakerPtr MatchmakerAPI = IPlayFabModuleInterface::Get().GetMatchmakerAPI();

	bool CallResult = false;

	if(MatchmakerAPI.IsValid())
	{	
		CallResult = MatchmakerAPI->AuthUser(Request, SuccessDelegate, ErrorDelegate);
	}

	if(CallResult == false)
	{
		FBPMatchmakerAuthUserResponse BPResult;
 		OnFailure.Broadcast(BPResult);
	}
}


//////////////////////////////////////////////////////////////////////////
// Delegate handles
void UPFMatchmakerAuthUser::OnSuccessCallback(const PlayFab::MatchmakerModels::FAuthUserResponse& Result)
{
	FBPMatchmakerAuthUserResponse BPResult;
 	BPResult.Data = Result;
 	OnSuccess.Broadcast(BPResult);
}

void UPFMatchmakerAuthUser::OnErrorCallback(const PlayFab::FPlayFabError& InError)
{
	FBPMatchmakerAuthUserResponse BPResult;
 	OnFailure.Broadcast(BPResult);	
}
