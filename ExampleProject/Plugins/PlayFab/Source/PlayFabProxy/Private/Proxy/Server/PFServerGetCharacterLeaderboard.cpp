// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabProxyPrivatePCH.h"
#include "PlayFab.h"
#include "PFServerGetCharacterLeaderboard.h"

UPFServerGetCharacterLeaderboard::UPFServerGetCharacterLeaderboard(const FObjectInitializer& ObjectInitializer)
	: Super(ObjectInitializer)
	, SuccessDelegate(PlayFab::UPlayFabServerAPI::FGetCharacterLeaderboardDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
	, ErrorDelegate(PlayFab::FPlayFabErrorDelegate::CreateUObject(this, &ThisClass::OnErrorCallback))
{
}

UPFServerGetCharacterLeaderboard* UPFServerGetCharacterLeaderboard::GetCharacterLeaderboard(UObject* WorldContextObject, class APlayerController* PlayerController , const FString& InCharacterId, const FString& InCharacterType, const FString& InStatisticName, const int32& InStartPosition, const int32& InMaxResultsCount)
{
	UPFServerGetCharacterLeaderboard* Proxy = NewObject<UPFServerGetCharacterLeaderboard>();
 	//Proxy->PlayerControllerWeakPtr = PlayerController;
	Proxy->Request.CharacterId = InCharacterId;
	Proxy->Request.CharacterType = InCharacterType;
	Proxy->Request.StatisticName = InStatisticName;
	Proxy->Request.StartPosition = InStartPosition;
	Proxy->Request.MaxResultsCount = InMaxResultsCount;
	

 	//Proxy->WorldContextObject = WorldContextObject;
	return Proxy;
}

void UPFServerGetCharacterLeaderboard::Activate()
{
	// grab the module, so we can get a valid pointer to the client API 
	PlayFabServerPtr ServerAPI = IPlayFabModuleInterface::Get().GetServerAPI();

	bool CallResult = false;

	if(ServerAPI.IsValid())
	{	
		CallResult = ServerAPI->GetCharacterLeaderboard(Request, SuccessDelegate, ErrorDelegate);
	}

	if(CallResult == false)
	{
		FBPServerGetCharacterLeaderboardResult BPResult;
 		OnFailure.Broadcast(BPResult);
	}
}


//////////////////////////////////////////////////////////////////////////
// Delegate handles
void UPFServerGetCharacterLeaderboard::OnSuccessCallback(const PlayFab::ServerModels::FGetCharacterLeaderboardResult& Result)
{
	FBPServerGetCharacterLeaderboardResult BPResult;
 	BPResult.Data = Result;
 	OnSuccess.Broadcast(BPResult);
}

void UPFServerGetCharacterLeaderboard::OnErrorCallback(const PlayFab::FPlayFabError& InError)
{
	FBPServerGetCharacterLeaderboardResult BPResult;
 	OnFailure.Broadcast(BPResult);	
}
