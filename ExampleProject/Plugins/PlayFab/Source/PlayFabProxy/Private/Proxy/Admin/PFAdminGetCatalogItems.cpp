// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabProxyPrivatePCH.h"
#include "PFAdminGetCatalogItems.h"

UPFAdminGetCatalogItems::UPFAdminGetCatalogItems(const FObjectInitializer& ObjectInitializer)
	: Super(ObjectInitializer)
	, SuccessDelegate(PlayFab::UPlayFabAdminAPI::FGetCatalogItemsDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
	, ErrorDelegate(PlayFab::FPlayFabErrorDelegate::CreateUObject(this, &ThisClass::OnErrorCallback))
{
}

UPFAdminGetCatalogItems* UPFAdminGetCatalogItems::GetCatalogItems(UObject* WorldContextObject, class APlayerController* PlayerController , const FString& InCatalogVersion)
{
	UPFAdminGetCatalogItems* Proxy = NewObject<UPFAdminGetCatalogItems>();
 	//Proxy->PlayerControllerWeakPtr = PlayerController;
	Proxy->Request.CatalogVersion = InCatalogVersion;
	

 	//Proxy->WorldContextObject = WorldContextObject;
	return Proxy;
}

void UPFAdminGetCatalogItems::Activate()
{
	// grab the module, so we can get a valid pointer to the client API 
	PlayFabAdminPtr AdminAPI = IPlayFabModuleInterface::Get().GetAdminAPI();

	bool CallResult = false;

	if(AdminAPI.IsValid())
	{	
		CallResult = AdminAPI->GetCatalogItems(Request, SuccessDelegate, ErrorDelegate);
	}

	if(CallResult == false)
	{
		FBPAdminGetCatalogItemsResult BPResult;
 		OnFailure.Broadcast(BPResult);
	}
}


//////////////////////////////////////////////////////////////////////////
// Delegate handles
void UPFAdminGetCatalogItems::OnSuccessCallback(const PlayFab::AdminModels::FGetCatalogItemsResult& Result)
{
	FBPAdminGetCatalogItemsResult BPResult;
 	BPResult.Data = Result;
 	OnSuccess.Broadcast(BPResult);
}

void UPFAdminGetCatalogItems::OnErrorCallback(const PlayFab::FPlayFabError& InError)
{
	FBPAdminGetCatalogItemsResult BPResult;
 	OnFailure.Broadcast(BPResult);	
}
