// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabProxyPrivatePCH.h"
#include "PlayFab.h"
#include "PFAdminUpdateTask.h"

UPFAdminUpdateTask::UPFAdminUpdateTask(const FObjectInitializer& ObjectInitializer)
	: Super(ObjectInitializer)
	, SuccessDelegate(PlayFab::UPlayFabAdminAPI::FUpdateTaskDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
	, ErrorDelegate(PlayFab::FPlayFabErrorDelegate::CreateUObject(this, &ThisClass::OnErrorCallback))
{
}

UPFAdminUpdateTask* UPFAdminUpdateTask::UpdateTask(UObject* WorldContextObject, class APlayerController* PlayerController , const FBPAdminNameIdentifier& InIdentifier, const FString& InName, const FString& InDescription, const FString& InSchedule, const bool& InIsActive)
{
	UPFAdminUpdateTask* Proxy = NewObject<UPFAdminUpdateTask>();
 	//Proxy->PlayerControllerWeakPtr = PlayerController;
	*Proxy->Request.Identifier = InIdentifier.Data;
	Proxy->Request.Name = InName;
	Proxy->Request.Description = InDescription;
	Proxy->Request.Schedule = InSchedule;
	Proxy->Request.IsActive = InIsActive;
	
	
	

 	//Proxy->WorldContextObject = WorldContextObject;
	return Proxy;
}

void UPFAdminUpdateTask::Activate()
{
	// grab the module, so we can get a valid pointer to the client API 
	PlayFabAdminPtr AdminAPI = IPlayFabModuleInterface::Get().GetAdminAPI();

	bool CallResult = false;

	if(AdminAPI.IsValid())
	{	
		CallResult = AdminAPI->UpdateTask(Request, SuccessDelegate, ErrorDelegate);
	}

	if(CallResult == false)
	{
		OnFailure.Broadcast();
	}
}


//////////////////////////////////////////////////////////////////////////
// Delegate handles
void UPFAdminUpdateTask::OnSuccessCallback(const PlayFab::AdminModels::FEmptyResult& Result)
{
	OnSuccess.Broadcast();
}

void UPFAdminUpdateTask::OnErrorCallback(const PlayFab::FPlayFabError& InError)
{
	OnFailure.Broadcast();	
}
