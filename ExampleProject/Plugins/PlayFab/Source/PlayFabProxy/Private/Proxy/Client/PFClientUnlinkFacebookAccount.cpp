// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabProxyPrivatePCH.h"
#include "PlayFab.h"
#include "PFClientUnlinkFacebookAccount.h"

UPFClientUnlinkFacebookAccount::UPFClientUnlinkFacebookAccount(const FObjectInitializer& ObjectInitializer)
	: Super(ObjectInitializer)
	, SuccessDelegate(PlayFab::UPlayFabClientAPI::FUnlinkFacebookAccountDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
	, ErrorDelegate(PlayFab::FPlayFabErrorDelegate::CreateUObject(this, &ThisClass::OnErrorCallback))
{
}

UPFClientUnlinkFacebookAccount* UPFClientUnlinkFacebookAccount::UnlinkFacebookAccount(UObject* WorldContextObject, class APlayerController* PlayerController )
{
	UPFClientUnlinkFacebookAccount* Proxy = NewObject<UPFClientUnlinkFacebookAccount>();
 	//Proxy->PlayerControllerWeakPtr = PlayerController;
	

 	//Proxy->WorldContextObject = WorldContextObject;
	return Proxy;
}

void UPFClientUnlinkFacebookAccount::Activate()
{
	// grab the module, so we can get a valid pointer to the client API 
	PlayFabClientPtr ClientAPI = IPlayFabModuleInterface::Get().GetClientAPI();

	bool CallResult = false;

	if(ClientAPI.IsValid())
	{	
		CallResult = ClientAPI->UnlinkFacebookAccount(SuccessDelegate, ErrorDelegate);
	}

	if(CallResult == false)
	{
		OnFailure.Broadcast();
	}
}


//////////////////////////////////////////////////////////////////////////
// Delegate handles
void UPFClientUnlinkFacebookAccount::OnSuccessCallback(const PlayFab::ClientModels::FUnlinkFacebookAccountResult& Result)
{
	OnSuccess.Broadcast();
}

void UPFClientUnlinkFacebookAccount::OnErrorCallback(const PlayFab::FPlayFabError& InError)
{
	OnFailure.Broadcast();	
}
