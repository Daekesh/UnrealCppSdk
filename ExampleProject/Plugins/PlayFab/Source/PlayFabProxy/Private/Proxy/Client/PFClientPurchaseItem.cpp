// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabProxyPrivatePCH.h"
#include "PFClientPurchaseItem.h"

UPFClientPurchaseItem::UPFClientPurchaseItem(const FObjectInitializer& ObjectInitializer)
	: Super(ObjectInitializer)
	, SuccessDelegate(PlayFab::UPlayFabClientAPI::FPurchaseItemDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
	, ErrorDelegate(PlayFab::FPlayFabErrorDelegate::CreateUObject(this, &ThisClass::OnErrorCallback))
{
}

UPFClientPurchaseItem* UPFClientPurchaseItem::PurchaseItem(UObject* WorldContextObject, class APlayerController* PlayerController , const FString& InItemId, const FString& InVirtualCurrency, const int32& InPrice, const FString& InCatalogVersion, const FString& InStoreId, const FString& InCharacterId)
{
	UPFClientPurchaseItem* Proxy = NewObject<UPFClientPurchaseItem>();
 	//Proxy->PlayerControllerWeakPtr = PlayerController;
	Proxy->Request.ItemId = InItemId;
	Proxy->Request.VirtualCurrency = InVirtualCurrency;
	Proxy->Request.Price = InPrice;
	Proxy->Request.CatalogVersion = InCatalogVersion;
	Proxy->Request.StoreId = InStoreId;
	Proxy->Request.CharacterId = InCharacterId;
	

 	//Proxy->WorldContextObject = WorldContextObject;
	return Proxy;
}

void UPFClientPurchaseItem::Activate()
{
	// grab the module, so we can get a valid pointer to the client API 
	PlayFabClientPtr ClientAPI = IPlayFabModuleInterface::Get().GetClientAPI();

	bool CallResult = false;

	if(ClientAPI.IsValid())
	{	
		CallResult = ClientAPI->PurchaseItem(Request, SuccessDelegate, ErrorDelegate);
	}

	if(CallResult == false)
	{
		FBPClientPurchaseItemResult BPResult;
 		OnFailure.Broadcast(BPResult);
	}
}


//////////////////////////////////////////////////////////////////////////
// Delegate handles
void UPFClientPurchaseItem::OnSuccessCallback(const PlayFab::ClientModels::FPurchaseItemResult& Result)
{
	FBPClientPurchaseItemResult BPResult;
 	BPResult.Data = Result;
 	OnSuccess.Broadcast(BPResult);
}

void UPFClientPurchaseItem::OnErrorCallback(const PlayFab::FPlayFabError& InError)
{
	FBPClientPurchaseItemResult BPResult;
 	OnFailure.Broadcast(BPResult);	
}
