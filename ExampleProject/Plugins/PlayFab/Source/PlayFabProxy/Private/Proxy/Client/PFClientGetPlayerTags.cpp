// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabProxyPrivatePCH.h"
#include "PlayFab.h"
#include "PFClientGetPlayerTags.h"

UPFClientGetPlayerTags::UPFClientGetPlayerTags(const FObjectInitializer& ObjectInitializer)
	: Super(ObjectInitializer)
	, SuccessDelegate(PlayFab::UPlayFabClientAPI::FGetPlayerTagsDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
	, ErrorDelegate(PlayFab::FPlayFabErrorDelegate::CreateUObject(this, &ThisClass::OnErrorCallback))
{
}

UPFClientGetPlayerTags* UPFClientGetPlayerTags::GetPlayerTags(UObject* WorldContextObject, class APlayerController* PlayerController , const FString& InPlayFabId, const FString& InNamespace)
{
	UPFClientGetPlayerTags* Proxy = NewObject<UPFClientGetPlayerTags>();
 	//Proxy->PlayerControllerWeakPtr = PlayerController;
	Proxy->Request.PlayFabId = InPlayFabId;
	Proxy->Request.Namespace = InNamespace;
	

 	//Proxy->WorldContextObject = WorldContextObject;
	return Proxy;
}

void UPFClientGetPlayerTags::Activate()
{
	// grab the module, so we can get a valid pointer to the client API 
	PlayFabClientPtr ClientAPI = IPlayFabModuleInterface::Get().GetClientAPI();

	bool CallResult = false;

	if(ClientAPI.IsValid())
	{	
		CallResult = ClientAPI->GetPlayerTags(Request, SuccessDelegate, ErrorDelegate);
	}

	if(CallResult == false)
	{
		FBPClientGetPlayerTagsResult BPResult;
 		OnFailure.Broadcast(BPResult);
	}
}


//////////////////////////////////////////////////////////////////////////
// Delegate handles
void UPFClientGetPlayerTags::OnSuccessCallback(const PlayFab::ClientModels::FGetPlayerTagsResult& Result)
{
	FBPClientGetPlayerTagsResult BPResult;
 	BPResult.Data = Result;
 	OnSuccess.Broadcast(BPResult);
}

void UPFClientGetPlayerTags::OnErrorCallback(const PlayFab::FPlayFabError& InError)
{
	FBPClientGetPlayerTagsResult BPResult;
 	OnFailure.Broadcast(BPResult);	
}
