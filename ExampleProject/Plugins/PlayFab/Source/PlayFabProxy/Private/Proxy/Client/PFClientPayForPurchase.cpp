// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabProxyPrivatePCH.h"
#include "PFClientPayForPurchase.h"

UPFClientPayForPurchase::UPFClientPayForPurchase(const FObjectInitializer& ObjectInitializer)
	: Super(ObjectInitializer)
	, SuccessDelegate(PlayFab::UPlayFabClientAPI::FPayForPurchaseDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
	, ErrorDelegate(PlayFab::FPlayFabErrorDelegate::CreateUObject(this, &ThisClass::OnErrorCallback))
{
}

UPFClientPayForPurchase* UPFClientPayForPurchase::PayForPurchase(UObject* WorldContextObject, class APlayerController* PlayerController , const FString& InOrderId, const FString& InProviderName, const FString& InCurrency, const FString& InProviderTransactionId)
{
	UPFClientPayForPurchase* Proxy = NewObject<UPFClientPayForPurchase>();
 	//Proxy->PlayerControllerWeakPtr = PlayerController;
	Proxy->Request.OrderId = InOrderId;
	Proxy->Request.ProviderName = InProviderName;
	Proxy->Request.Currency = InCurrency;
	Proxy->Request.ProviderTransactionId = InProviderTransactionId;
	

 	//Proxy->WorldContextObject = WorldContextObject;
	return Proxy;
}

void UPFClientPayForPurchase::Activate()
{
	// grab the module, so we can get a valid pointer to the client API 
	PlayFabClientPtr ClientAPI = IPlayFabModuleInterface::Get().GetClientAPI();

	bool CallResult = false;

	if(ClientAPI.IsValid())
	{	
		CallResult = ClientAPI->PayForPurchase(Request, SuccessDelegate, ErrorDelegate);
	}

	if(CallResult == false)
	{
		FBPClientPayForPurchaseResult BPResult;
 		OnFailure.Broadcast(BPResult);
	}
}


//////////////////////////////////////////////////////////////////////////
// Delegate handles
void UPFClientPayForPurchase::OnSuccessCallback(const PlayFab::ClientModels::FPayForPurchaseResult& Result)
{
	FBPClientPayForPurchaseResult BPResult;
 	BPResult.Data = Result;
 	OnSuccess.Broadcast(BPResult);
}

void UPFClientPayForPurchase::OnErrorCallback(const PlayFab::FPlayFabError& InError)
{
	FBPClientPayForPurchaseResult BPResult;
 	OnFailure.Broadcast(BPResult);	
}
