// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once

#include "Core/PlayFabBaseModel.h"

namespace PlayFab
{
namespace ServerModels
{

	
	struct PLAYFAB_API FAddCharacterVirtualCurrencyRequest : public FPlayFabBaseModel
    {
		
		// PlayFab unique identifier of the user whose virtual currency balance is to be incremented.
		FString PlayFabId;
		// Unique PlayFab assigned ID for a specific character owned by a user
		FString CharacterId;
		// Name of the virtual currency which is to be incremented.
		FString VirtualCurrency;
		// Amount to be added to the character balance of the specified virtual currency. Maximum VC balance is Int32 (2,147,483,647). Any increase over this value will be discarded.
		int32 Amount;
	
        FAddCharacterVirtualCurrencyRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			CharacterId(),
			VirtualCurrency(),
			Amount(0)
			{}
		
		FAddCharacterVirtualCurrencyRequest(const FAddCharacterVirtualCurrencyRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			CharacterId(src.CharacterId),
			VirtualCurrency(src.VirtualCurrency),
			Amount(src.Amount)
			{}
			
		FAddCharacterVirtualCurrencyRequest(const TSharedPtr<FJsonObject>& obj) : FAddCharacterVirtualCurrencyRequest()
        {
            readFromValue(obj);
        }
		
		~FAddCharacterVirtualCurrencyRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FAddSharedGroupMembersRequest : public FPlayFabBaseModel
    {
		
		// Unique identifier for the shared group.
		FString SharedGroupId;
		// [optional] An array of unique PlayFab assigned ID of the user on whom the operation will be performed.
		TArray<FString> PlayFabIds;
	
        FAddSharedGroupMembersRequest() :
			FPlayFabBaseModel(),
			SharedGroupId(),
			PlayFabIds()
			{}
		
		FAddSharedGroupMembersRequest(const FAddSharedGroupMembersRequest& src) :
			FPlayFabBaseModel(),
			SharedGroupId(src.SharedGroupId),
			PlayFabIds(src.PlayFabIds)
			{}
			
		FAddSharedGroupMembersRequest(const TSharedPtr<FJsonObject>& obj) : FAddSharedGroupMembersRequest()
        {
            readFromValue(obj);
        }
		
		~FAddSharedGroupMembersRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FAddSharedGroupMembersResult : public FPlayFabBaseModel
    {
		
	
        FAddSharedGroupMembersResult() :
			FPlayFabBaseModel()
			{}
		
		FAddSharedGroupMembersResult(const FAddSharedGroupMembersResult& src) :
			FPlayFabBaseModel()
			{}
			
		FAddSharedGroupMembersResult(const TSharedPtr<FJsonObject>& obj) : FAddSharedGroupMembersResult()
        {
            readFromValue(obj);
        }
		
		~FAddSharedGroupMembersResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FAddUserVirtualCurrencyRequest : public FPlayFabBaseModel
    {
		
		// PlayFab unique identifier of the user whose virtual currency balance is to be increased.
		FString PlayFabId;
		// Name of the virtual currency which is to be incremented.
		FString VirtualCurrency;
		// Amount to be added to the user balance of the specified virtual currency. Maximum VC balance is Int32 (2,147,483,647). Any increase over this value will be discarded.
		int32 Amount;
	
        FAddUserVirtualCurrencyRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			VirtualCurrency(),
			Amount(0)
			{}
		
		FAddUserVirtualCurrencyRequest(const FAddUserVirtualCurrencyRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			VirtualCurrency(src.VirtualCurrency),
			Amount(src.Amount)
			{}
			
		FAddUserVirtualCurrencyRequest(const TSharedPtr<FJsonObject>& obj) : FAddUserVirtualCurrencyRequest()
        {
            readFromValue(obj);
        }
		
		~FAddUserVirtualCurrencyRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FAuthenticateSessionTicketRequest : public FPlayFabBaseModel
    {
		
		// Session ticket as issued by a PlayFab client login API.
		FString SessionTicket;
	
        FAuthenticateSessionTicketRequest() :
			FPlayFabBaseModel(),
			SessionTicket()
			{}
		
		FAuthenticateSessionTicketRequest(const FAuthenticateSessionTicketRequest& src) :
			FPlayFabBaseModel(),
			SessionTicket(src.SessionTicket)
			{}
			
		FAuthenticateSessionTicketRequest(const TSharedPtr<FJsonObject>& obj) : FAuthenticateSessionTicketRequest()
        {
            readFromValue(obj);
        }
		
		~FAuthenticateSessionTicketRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	enum UserOrigination
	{
		UserOriginationOrganic,
		UserOriginationSteam,
		UserOriginationGoogle,
		UserOriginationAmazon,
		UserOriginationFacebook,
		UserOriginationKongregate,
		UserOriginationGamersFirst,
		UserOriginationUnknown,
		UserOriginationIOS,
		UserOriginationLoadTest,
		UserOriginationAndroid,
		UserOriginationPSN,
		UserOriginationGameCenter,
		UserOriginationCustomId,
		UserOriginationXboxLive,
		UserOriginationParse
	};
	
	void writeUserOriginationEnumJSON(UserOrigination enumVal, JsonWriter& writer);
	UserOrigination readUserOriginationFromValue(const TSharedPtr<FJsonValue>& value);
	
	
	struct PLAYFAB_API FUserTitleInfo : public FPlayFabBaseModel
    {
		
		// [optional] name of the user, as it is displayed in-game
		FString DisplayName;
		// [optional] source by which the user first joined the game, if known
		Boxed<UserOrigination> Origination;
		// timestamp indicating when the user was first associated with this game (this can differ significantly from when the user first registered with PlayFab)
		FDateTime Created;
		// [optional] timestamp for the last user login for this title
		OptionalTime LastLogin;
		// [optional] timestamp indicating when the user first signed into this game (this can differ from the Created timestamp, as other events, such as issuing a beta key to the user, can associate the title to the user)
		OptionalTime FirstLogin;
		// [optional] boolean indicating whether or not the user is currently banned for a title
		OptionalBool isBanned;
	
        FUserTitleInfo() :
			FPlayFabBaseModel(),
			DisplayName(),
			Origination(),
			Created(0),
			LastLogin(),
			FirstLogin(),
			isBanned()
			{}
		
		FUserTitleInfo(const FUserTitleInfo& src) :
			FPlayFabBaseModel(),
			DisplayName(src.DisplayName),
			Origination(src.Origination),
			Created(src.Created),
			LastLogin(src.LastLogin),
			FirstLogin(src.FirstLogin),
			isBanned(src.isBanned)
			{}
			
		FUserTitleInfo(const TSharedPtr<FJsonObject>& obj) : FUserTitleInfo()
        {
            readFromValue(obj);
        }
		
		~FUserTitleInfo();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUserPrivateAccountInfo : public FPlayFabBaseModel
    {
		
		// [optional] user email address
		FString Email;
	
        FUserPrivateAccountInfo() :
			FPlayFabBaseModel(),
			Email()
			{}
		
		FUserPrivateAccountInfo(const FUserPrivateAccountInfo& src) :
			FPlayFabBaseModel(),
			Email(src.Email)
			{}
			
		FUserPrivateAccountInfo(const TSharedPtr<FJsonObject>& obj) : FUserPrivateAccountInfo()
        {
            readFromValue(obj);
        }
		
		~FUserPrivateAccountInfo();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUserFacebookInfo : public FPlayFabBaseModel
    {
		
		// [optional] Facebook identifier
		FString FacebookId;
		// [optional] Facebook full name
		FString FullName;
	
        FUserFacebookInfo() :
			FPlayFabBaseModel(),
			FacebookId(),
			FullName()
			{}
		
		FUserFacebookInfo(const FUserFacebookInfo& src) :
			FPlayFabBaseModel(),
			FacebookId(src.FacebookId),
			FullName(src.FullName)
			{}
			
		FUserFacebookInfo(const TSharedPtr<FJsonObject>& obj) : FUserFacebookInfo()
        {
            readFromValue(obj);
        }
		
		~FUserFacebookInfo();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	enum Currency
	{
		CurrencyAED,
		CurrencyAFN,
		CurrencyALL,
		CurrencyAMD,
		CurrencyANG,
		CurrencyAOA,
		CurrencyARS,
		CurrencyAUD,
		CurrencyAWG,
		CurrencyAZN,
		CurrencyBAM,
		CurrencyBBD,
		CurrencyBDT,
		CurrencyBGN,
		CurrencyBHD,
		CurrencyBIF,
		CurrencyBMD,
		CurrencyBND,
		CurrencyBOB,
		CurrencyBRL,
		CurrencyBSD,
		CurrencyBTN,
		CurrencyBWP,
		CurrencyBYR,
		CurrencyBZD,
		CurrencyCAD,
		CurrencyCDF,
		CurrencyCHF,
		CurrencyCLP,
		CurrencyCNY,
		CurrencyCOP,
		CurrencyCRC,
		CurrencyCUC,
		CurrencyCUP,
		CurrencyCVE,
		CurrencyCZK,
		CurrencyDJF,
		CurrencyDKK,
		CurrencyDOP,
		CurrencyDZD,
		CurrencyEGP,
		CurrencyERN,
		CurrencyETB,
		CurrencyEUR,
		CurrencyFJD,
		CurrencyFKP,
		CurrencyGBP,
		CurrencyGEL,
		CurrencyGGP,
		CurrencyGHS,
		CurrencyGIP,
		CurrencyGMD,
		CurrencyGNF,
		CurrencyGTQ,
		CurrencyGYD,
		CurrencyHKD,
		CurrencyHNL,
		CurrencyHRK,
		CurrencyHTG,
		CurrencyHUF,
		CurrencyIDR,
		CurrencyILS,
		CurrencyIMP,
		CurrencyINR,
		CurrencyIQD,
		CurrencyIRR,
		CurrencyISK,
		CurrencyJEP,
		CurrencyJMD,
		CurrencyJOD,
		CurrencyJPY,
		CurrencyKES,
		CurrencyKGS,
		CurrencyKHR,
		CurrencyKMF,
		CurrencyKPW,
		CurrencyKRW,
		CurrencyKWD,
		CurrencyKYD,
		CurrencyKZT,
		CurrencyLAK,
		CurrencyLBP,
		CurrencyLKR,
		CurrencyLRD,
		CurrencyLSL,
		CurrencyLYD,
		CurrencyMAD,
		CurrencyMDL,
		CurrencyMGA,
		CurrencyMKD,
		CurrencyMMK,
		CurrencyMNT,
		CurrencyMOP,
		CurrencyMRO,
		CurrencyMUR,
		CurrencyMVR,
		CurrencyMWK,
		CurrencyMXN,
		CurrencyMYR,
		CurrencyMZN,
		CurrencyNAD,
		CurrencyNGN,
		CurrencyNIO,
		CurrencyNOK,
		CurrencyNPR,
		CurrencyNZD,
		CurrencyOMR,
		CurrencyPAB,
		CurrencyPEN,
		CurrencyPGK,
		CurrencyPHP,
		CurrencyPKR,
		CurrencyPLN,
		CurrencyPYG,
		CurrencyQAR,
		CurrencyRON,
		CurrencyRSD,
		CurrencyRUB,
		CurrencyRWF,
		CurrencySAR,
		CurrencySBD,
		CurrencySCR,
		CurrencySDG,
		CurrencySEK,
		CurrencySGD,
		CurrencySHP,
		CurrencySLL,
		CurrencySOS,
		CurrencySPL,
		CurrencySRD,
		CurrencySTD,
		CurrencySVC,
		CurrencySYP,
		CurrencySZL,
		CurrencyTHB,
		CurrencyTJS,
		CurrencyTMT,
		CurrencyTND,
		CurrencyTOP,
		CurrencyTRY,
		CurrencyTTD,
		CurrencyTVD,
		CurrencyTWD,
		CurrencyTZS,
		CurrencyUAH,
		CurrencyUGX,
		CurrencyUSD,
		CurrencyUYU,
		CurrencyUZS,
		CurrencyVEF,
		CurrencyVND,
		CurrencyVUV,
		CurrencyWST,
		CurrencyXAF,
		CurrencyXCD,
		CurrencyXDR,
		CurrencyXOF,
		CurrencyXPF,
		CurrencyYER,
		CurrencyZAR,
		CurrencyZMW,
		CurrencyZWD
	};
	
	void writeCurrencyEnumJSON(Currency enumVal, JsonWriter& writer);
	Currency readCurrencyFromValue(const TSharedPtr<FJsonValue>& value);
	
	
	enum TitleActivationStatus
	{
		TitleActivationStatusNone,
		TitleActivationStatusActivatedTitleKey,
		TitleActivationStatusPendingSteam,
		TitleActivationStatusActivatedSteam,
		TitleActivationStatusRevokedSteam
	};
	
	void writeTitleActivationStatusEnumJSON(TitleActivationStatus enumVal, JsonWriter& writer);
	TitleActivationStatus readTitleActivationStatusFromValue(const TSharedPtr<FJsonValue>& value);
	
	
	struct PLAYFAB_API FUserSteamInfo : public FPlayFabBaseModel
    {
		
		// [optional] Steam identifier
		FString SteamId;
		// [optional] the country in which the player resides, from Steam data
		FString SteamCountry;
		// [optional] currency type set in the user Steam account
		Boxed<Currency> SteamCurrency;
		// [optional] what stage of game ownership the user is listed as being in, from Steam
		Boxed<TitleActivationStatus> SteamActivationStatus;
	
        FUserSteamInfo() :
			FPlayFabBaseModel(),
			SteamId(),
			SteamCountry(),
			SteamCurrency(),
			SteamActivationStatus()
			{}
		
		FUserSteamInfo(const FUserSteamInfo& src) :
			FPlayFabBaseModel(),
			SteamId(src.SteamId),
			SteamCountry(src.SteamCountry),
			SteamCurrency(src.SteamCurrency),
			SteamActivationStatus(src.SteamActivationStatus)
			{}
			
		FUserSteamInfo(const TSharedPtr<FJsonObject>& obj) : FUserSteamInfo()
        {
            readFromValue(obj);
        }
		
		~FUserSteamInfo();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUserGameCenterInfo : public FPlayFabBaseModel
    {
		
		// [optional] Gamecenter identifier
		FString GameCenterId;
	
        FUserGameCenterInfo() :
			FPlayFabBaseModel(),
			GameCenterId()
			{}
		
		FUserGameCenterInfo(const FUserGameCenterInfo& src) :
			FPlayFabBaseModel(),
			GameCenterId(src.GameCenterId)
			{}
			
		FUserGameCenterInfo(const TSharedPtr<FJsonObject>& obj) : FUserGameCenterInfo()
        {
            readFromValue(obj);
        }
		
		~FUserGameCenterInfo();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUserIosDeviceInfo : public FPlayFabBaseModel
    {
		
		// [optional] iOS device ID
		FString IosDeviceId;
	
        FUserIosDeviceInfo() :
			FPlayFabBaseModel(),
			IosDeviceId()
			{}
		
		FUserIosDeviceInfo(const FUserIosDeviceInfo& src) :
			FPlayFabBaseModel(),
			IosDeviceId(src.IosDeviceId)
			{}
			
		FUserIosDeviceInfo(const TSharedPtr<FJsonObject>& obj) : FUserIosDeviceInfo()
        {
            readFromValue(obj);
        }
		
		~FUserIosDeviceInfo();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUserAndroidDeviceInfo : public FPlayFabBaseModel
    {
		
		// [optional] Android device ID
		FString AndroidDeviceId;
	
        FUserAndroidDeviceInfo() :
			FPlayFabBaseModel(),
			AndroidDeviceId()
			{}
		
		FUserAndroidDeviceInfo(const FUserAndroidDeviceInfo& src) :
			FPlayFabBaseModel(),
			AndroidDeviceId(src.AndroidDeviceId)
			{}
			
		FUserAndroidDeviceInfo(const TSharedPtr<FJsonObject>& obj) : FUserAndroidDeviceInfo()
        {
            readFromValue(obj);
        }
		
		~FUserAndroidDeviceInfo();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUserKongregateInfo : public FPlayFabBaseModel
    {
		
		// [optional] Kongregate ID
		FString KongregateId;
		// [optional] Kongregate Username
		FString KongregateName;
	
        FUserKongregateInfo() :
			FPlayFabBaseModel(),
			KongregateId(),
			KongregateName()
			{}
		
		FUserKongregateInfo(const FUserKongregateInfo& src) :
			FPlayFabBaseModel(),
			KongregateId(src.KongregateId),
			KongregateName(src.KongregateName)
			{}
			
		FUserKongregateInfo(const TSharedPtr<FJsonObject>& obj) : FUserKongregateInfo()
        {
            readFromValue(obj);
        }
		
		~FUserKongregateInfo();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUserPsnInfo : public FPlayFabBaseModel
    {
		
		// [optional] PSN account ID
		FString PsnAccountId;
		// [optional] PSN online ID
		FString PsnOnlineId;
	
        FUserPsnInfo() :
			FPlayFabBaseModel(),
			PsnAccountId(),
			PsnOnlineId()
			{}
		
		FUserPsnInfo(const FUserPsnInfo& src) :
			FPlayFabBaseModel(),
			PsnAccountId(src.PsnAccountId),
			PsnOnlineId(src.PsnOnlineId)
			{}
			
		FUserPsnInfo(const TSharedPtr<FJsonObject>& obj) : FUserPsnInfo()
        {
            readFromValue(obj);
        }
		
		~FUserPsnInfo();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUserGoogleInfo : public FPlayFabBaseModel
    {
		
		// [optional] Google ID
		FString GoogleId;
		// [optional] Email address of the Google account
		FString GoogleEmail;
		// [optional] Locale of the Google account
		FString GoogleLocale;
		// [optional] Gender information of the Google account
		FString GoogleGender;
	
        FUserGoogleInfo() :
			FPlayFabBaseModel(),
			GoogleId(),
			GoogleEmail(),
			GoogleLocale(),
			GoogleGender()
			{}
		
		FUserGoogleInfo(const FUserGoogleInfo& src) :
			FPlayFabBaseModel(),
			GoogleId(src.GoogleId),
			GoogleEmail(src.GoogleEmail),
			GoogleLocale(src.GoogleLocale),
			GoogleGender(src.GoogleGender)
			{}
			
		FUserGoogleInfo(const TSharedPtr<FJsonObject>& obj) : FUserGoogleInfo()
        {
            readFromValue(obj);
        }
		
		~FUserGoogleInfo();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUserXboxInfo : public FPlayFabBaseModel
    {
		
		// [optional] XBox user ID
		FString XboxUserId;
	
        FUserXboxInfo() :
			FPlayFabBaseModel(),
			XboxUserId()
			{}
		
		FUserXboxInfo(const FUserXboxInfo& src) :
			FPlayFabBaseModel(),
			XboxUserId(src.XboxUserId)
			{}
			
		FUserXboxInfo(const TSharedPtr<FJsonObject>& obj) : FUserXboxInfo()
        {
            readFromValue(obj);
        }
		
		~FUserXboxInfo();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUserCustomIdInfo : public FPlayFabBaseModel
    {
		
		// [optional] Custom ID
		FString CustomId;
	
        FUserCustomIdInfo() :
			FPlayFabBaseModel(),
			CustomId()
			{}
		
		FUserCustomIdInfo(const FUserCustomIdInfo& src) :
			FPlayFabBaseModel(),
			CustomId(src.CustomId)
			{}
			
		FUserCustomIdInfo(const TSharedPtr<FJsonObject>& obj) : FUserCustomIdInfo()
        {
            readFromValue(obj);
        }
		
		~FUserCustomIdInfo();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUserAccountInfo : public FPlayFabBaseModel
    {
		
		// [optional] Unique identifier for the user account
		FString PlayFabId;
		// Timestamp indicating when the user account was created
		FDateTime Created;
		// [optional] User account name in the PlayFab service
		FString Username;
		// [optional] Title-specific information for the user account
		TSharedPtr<FUserTitleInfo> TitleInfo;
		// [optional] Personal information for the user which is considered more sensitive
		TSharedPtr<FUserPrivateAccountInfo> PrivateInfo;
		// [optional] User Facebook information, if a Facebook account has been linked
		TSharedPtr<FUserFacebookInfo> FacebookInfo;
		// [optional] User Steam information, if a Steam account has been linked
		TSharedPtr<FUserSteamInfo> SteamInfo;
		// [optional] User Gamecenter information, if a Gamecenter account has been linked
		TSharedPtr<FUserGameCenterInfo> GameCenterInfo;
		// [optional] User iOS device information, if an iOS device has been linked
		TSharedPtr<FUserIosDeviceInfo> IosDeviceInfo;
		// [optional] User Android device information, if an Android device has been linked
		TSharedPtr<FUserAndroidDeviceInfo> AndroidDeviceInfo;
		// [optional] User Kongregate account information, if a Kongregate account has been linked
		TSharedPtr<FUserKongregateInfo> KongregateInfo;
		// [optional] User PSN account information, if a PSN account has been linked
		TSharedPtr<FUserPsnInfo> PsnInfo;
		// [optional] User Google account information, if a Google account has been linked
		TSharedPtr<FUserGoogleInfo> GoogleInfo;
		// [optional] User XBox account information, if a XBox account has been linked
		TSharedPtr<FUserXboxInfo> XboxInfo;
		// [optional] Custom ID information, if a custom ID has been assigned
		TSharedPtr<FUserCustomIdInfo> CustomIdInfo;
	
        FUserAccountInfo() :
			FPlayFabBaseModel(),
			PlayFabId(),
			Created(0),
			Username(),
			TitleInfo(nullptr),
			PrivateInfo(nullptr),
			FacebookInfo(nullptr),
			SteamInfo(nullptr),
			GameCenterInfo(nullptr),
			IosDeviceInfo(nullptr),
			AndroidDeviceInfo(nullptr),
			KongregateInfo(nullptr),
			PsnInfo(nullptr),
			GoogleInfo(nullptr),
			XboxInfo(nullptr),
			CustomIdInfo(nullptr)
			{}
		
		FUserAccountInfo(const FUserAccountInfo& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			Created(src.Created),
			Username(src.Username),
			TitleInfo(src.TitleInfo.IsValid() ? MakeShareable(new FUserTitleInfo(*src.TitleInfo)) : nullptr),
			PrivateInfo(src.PrivateInfo.IsValid() ? MakeShareable(new FUserPrivateAccountInfo(*src.PrivateInfo)) : nullptr),
			FacebookInfo(src.FacebookInfo.IsValid() ? MakeShareable(new FUserFacebookInfo(*src.FacebookInfo)) : nullptr),
			SteamInfo(src.SteamInfo.IsValid() ? MakeShareable(new FUserSteamInfo(*src.SteamInfo)) : nullptr),
			GameCenterInfo(src.GameCenterInfo.IsValid() ? MakeShareable(new FUserGameCenterInfo(*src.GameCenterInfo)) : nullptr),
			IosDeviceInfo(src.IosDeviceInfo.IsValid() ? MakeShareable(new FUserIosDeviceInfo(*src.IosDeviceInfo)) : nullptr),
			AndroidDeviceInfo(src.AndroidDeviceInfo.IsValid() ? MakeShareable(new FUserAndroidDeviceInfo(*src.AndroidDeviceInfo)) : nullptr),
			KongregateInfo(src.KongregateInfo.IsValid() ? MakeShareable(new FUserKongregateInfo(*src.KongregateInfo)) : nullptr),
			PsnInfo(src.PsnInfo.IsValid() ? MakeShareable(new FUserPsnInfo(*src.PsnInfo)) : nullptr),
			GoogleInfo(src.GoogleInfo.IsValid() ? MakeShareable(new FUserGoogleInfo(*src.GoogleInfo)) : nullptr),
			XboxInfo(src.XboxInfo.IsValid() ? MakeShareable(new FUserXboxInfo(*src.XboxInfo)) : nullptr),
			CustomIdInfo(src.CustomIdInfo.IsValid() ? MakeShareable(new FUserCustomIdInfo(*src.CustomIdInfo)) : nullptr)
			{}
			
		FUserAccountInfo(const TSharedPtr<FJsonObject>& obj) : FUserAccountInfo()
        {
            readFromValue(obj);
        }
		
		~FUserAccountInfo();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FAuthenticateSessionTicketResult : public FPlayFabBaseModel
    {
		
		// [optional] Account info for the user whose session ticket was supplied.
		TSharedPtr<FUserAccountInfo> UserInfo;
	
        FAuthenticateSessionTicketResult() :
			FPlayFabBaseModel(),
			UserInfo(nullptr)
			{}
		
		FAuthenticateSessionTicketResult(const FAuthenticateSessionTicketResult& src) :
			FPlayFabBaseModel(),
			UserInfo(src.UserInfo.IsValid() ? MakeShareable(new FUserAccountInfo(*src.UserInfo)) : nullptr)
			{}
			
		FAuthenticateSessionTicketResult(const TSharedPtr<FJsonObject>& obj) : FAuthenticateSessionTicketResult()
        {
            readFromValue(obj);
        }
		
		~FAuthenticateSessionTicketResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FAwardSteamAchievementItem : public FPlayFabBaseModel
    {
		
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// Unique Steam achievement name.
		FString AchievementName;
		// Result of the award attempt (only valid on response, not on request).
		bool Result;
	
        FAwardSteamAchievementItem() :
			FPlayFabBaseModel(),
			PlayFabId(),
			AchievementName(),
			Result(false)
			{}
		
		FAwardSteamAchievementItem(const FAwardSteamAchievementItem& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			AchievementName(src.AchievementName),
			Result(src.Result)
			{}
			
		FAwardSteamAchievementItem(const TSharedPtr<FJsonObject>& obj) : FAwardSteamAchievementItem()
        {
            readFromValue(obj);
        }
		
		~FAwardSteamAchievementItem();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FAwardSteamAchievementRequest : public FPlayFabBaseModel
    {
		
		// Array of achievements to grant and the users to whom they are to be granted.
		TArray<FAwardSteamAchievementItem> Achievements;
	
        FAwardSteamAchievementRequest() :
			FPlayFabBaseModel(),
			Achievements()
			{}
		
		FAwardSteamAchievementRequest(const FAwardSteamAchievementRequest& src) :
			FPlayFabBaseModel(),
			Achievements(src.Achievements)
			{}
			
		FAwardSteamAchievementRequest(const TSharedPtr<FJsonObject>& obj) : FAwardSteamAchievementRequest()
        {
            readFromValue(obj);
        }
		
		~FAwardSteamAchievementRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FAwardSteamAchievementResult : public FPlayFabBaseModel
    {
		
		// [optional] Array of achievements granted.
		TArray<FAwardSteamAchievementItem> AchievementResults;
	
        FAwardSteamAchievementResult() :
			FPlayFabBaseModel(),
			AchievementResults()
			{}
		
		FAwardSteamAchievementResult(const FAwardSteamAchievementResult& src) :
			FPlayFabBaseModel(),
			AchievementResults(src.AchievementResults)
			{}
			
		FAwardSteamAchievementResult(const TSharedPtr<FJsonObject>& obj) : FAwardSteamAchievementResult()
        {
            readFromValue(obj);
        }
		
		~FAwardSteamAchievementResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FCatalogItemConsumableInfo : public FPlayFabBaseModel
    {
		
		// [optional] number of times this object can be used, after which it will be removed from the player inventory
		OptionalUint32 UsageCount;
		// [optional] duration in seconds for how long the item will remain in the player inventory - once elapsed, the item will be removed
		OptionalUint32 UsagePeriod;
		// [optional] all inventory item instances in the player inventory sharing a non-null UsagePeriodGroup have their UsagePeriod values added together, and share the result - when that period has elapsed, all the items in the group will be removed
		FString UsagePeriodGroup;
	
        FCatalogItemConsumableInfo() :
			FPlayFabBaseModel(),
			UsageCount(),
			UsagePeriod(),
			UsagePeriodGroup()
			{}
		
		FCatalogItemConsumableInfo(const FCatalogItemConsumableInfo& src) :
			FPlayFabBaseModel(),
			UsageCount(src.UsageCount),
			UsagePeriod(src.UsagePeriod),
			UsagePeriodGroup(src.UsagePeriodGroup)
			{}
			
		FCatalogItemConsumableInfo(const TSharedPtr<FJsonObject>& obj) : FCatalogItemConsumableInfo()
        {
            readFromValue(obj);
        }
		
		~FCatalogItemConsumableInfo();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FCatalogItemContainerInfo : public FPlayFabBaseModel
    {
		
		// [optional] ItemId for the catalog item used to unlock the container, if any (if not specified, a call to UnlockContainerItem will open the container, adding the contents to the player inventory and currency balances)
		FString KeyItemId;
		// [optional] unique ItemId values for all items which will be added to the player inventory, once the container has been unlocked
		TArray<FString> ItemContents;
		// [optional] unique TableId values for all RandomResultTable objects which are part of the container (once unlocked, random tables will be resolved and add the relevant items to the player inventory)
		TArray<FString> ResultTableContents;
		// [optional] virtual currency types and balances which will be added to the player inventory when the container is unlocked
		TMap<FString, uint32> VirtualCurrencyContents;
	
        FCatalogItemContainerInfo() :
			FPlayFabBaseModel(),
			KeyItemId(),
			ItemContents(),
			ResultTableContents(),
			VirtualCurrencyContents()
			{}
		
		FCatalogItemContainerInfo(const FCatalogItemContainerInfo& src) :
			FPlayFabBaseModel(),
			KeyItemId(src.KeyItemId),
			ItemContents(src.ItemContents),
			ResultTableContents(src.ResultTableContents),
			VirtualCurrencyContents(src.VirtualCurrencyContents)
			{}
			
		FCatalogItemContainerInfo(const TSharedPtr<FJsonObject>& obj) : FCatalogItemContainerInfo()
        {
            readFromValue(obj);
        }
		
		~FCatalogItemContainerInfo();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FCatalogItemBundleInfo : public FPlayFabBaseModel
    {
		
		// [optional] unique ItemId values for all items which will be added to the player inventory when the bundle is added
		TArray<FString> BundledItems;
		// [optional] unique TableId values for all RandomResultTable objects which are part of the bundle (random tables will be resolved and add the relevant items to the player inventory when the bundle is added)
		TArray<FString> BundledResultTables;
		// [optional] virtual currency types and balances which will be added to the player inventory when the bundle is added
		TMap<FString, uint32> BundledVirtualCurrencies;
	
        FCatalogItemBundleInfo() :
			FPlayFabBaseModel(),
			BundledItems(),
			BundledResultTables(),
			BundledVirtualCurrencies()
			{}
		
		FCatalogItemBundleInfo(const FCatalogItemBundleInfo& src) :
			FPlayFabBaseModel(),
			BundledItems(src.BundledItems),
			BundledResultTables(src.BundledResultTables),
			BundledVirtualCurrencies(src.BundledVirtualCurrencies)
			{}
			
		FCatalogItemBundleInfo(const TSharedPtr<FJsonObject>& obj) : FCatalogItemBundleInfo()
        {
            readFromValue(obj);
        }
		
		~FCatalogItemBundleInfo();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FCatalogItem : public FPlayFabBaseModel
    {
		
		// unique identifier for this item
		FString ItemId;
		// [optional] class to which the item belongs
		FString ItemClass;
		// [optional] catalog version for this item
		FString CatalogVersion;
		// [optional] text name for the item, to show in-game
		FString DisplayName;
		// [optional] text description of item, to show in-game
		FString Description;
		// [optional] price of this item in virtual currencies and "RM" (the base Real Money purchase price, in USD pennies)
		TMap<FString, uint32> VirtualCurrencyPrices;
		// [optional] override prices for this item for specific currencies
		TMap<FString, uint32> RealCurrencyPrices;
		// [optional] list of item tags
		TArray<FString> Tags;
		// [optional] game specific custom data
		FString CustomData;
		// [optional] defines the consumable properties (number of uses, timeout) for the item
		TSharedPtr<FCatalogItemConsumableInfo> Consumable;
		// [optional] defines the container properties for the item - what items it contains, including random drop tables and virtual currencies, and what item (if any) is required to open it via the UnlockContainerItem API
		TSharedPtr<FCatalogItemContainerInfo> Container;
		// [optional] defines the bundle properties for the item - bundles are items which contain other items, including random drop tables and virtual currencies
		TSharedPtr<FCatalogItemBundleInfo> Bundle;
		// if true, then an item instance of this type can be used to grant a character to a user.
		bool CanBecomeCharacter;
		// if true, then only one item instance of this type will exist and its remaininguses will be incremented instead. RemainingUses will cap out at Int32.Max (2,147,483,647). All subsequent increases will be discarded
		bool IsStackable;
		// if true, then an item instance of this type can be traded between players using the trading APIs
		bool IsTradable;
		// [optional] URL to the item image. For Facebook purchase to display the image on the item purchase page, this must be set to an HTTP URL.
		FString ItemImageUrl;
	
        FCatalogItem() :
			FPlayFabBaseModel(),
			ItemId(),
			ItemClass(),
			CatalogVersion(),
			DisplayName(),
			Description(),
			VirtualCurrencyPrices(),
			RealCurrencyPrices(),
			Tags(),
			CustomData(),
			Consumable(nullptr),
			Container(nullptr),
			Bundle(nullptr),
			CanBecomeCharacter(false),
			IsStackable(false),
			IsTradable(false),
			ItemImageUrl()
			{}
		
		FCatalogItem(const FCatalogItem& src) :
			FPlayFabBaseModel(),
			ItemId(src.ItemId),
			ItemClass(src.ItemClass),
			CatalogVersion(src.CatalogVersion),
			DisplayName(src.DisplayName),
			Description(src.Description),
			VirtualCurrencyPrices(src.VirtualCurrencyPrices),
			RealCurrencyPrices(src.RealCurrencyPrices),
			Tags(src.Tags),
			CustomData(src.CustomData),
			Consumable(src.Consumable.IsValid() ? MakeShareable(new FCatalogItemConsumableInfo(*src.Consumable)) : nullptr),
			Container(src.Container.IsValid() ? MakeShareable(new FCatalogItemContainerInfo(*src.Container)) : nullptr),
			Bundle(src.Bundle.IsValid() ? MakeShareable(new FCatalogItemBundleInfo(*src.Bundle)) : nullptr),
			CanBecomeCharacter(src.CanBecomeCharacter),
			IsStackable(src.IsStackable),
			IsTradable(src.IsTradable),
			ItemImageUrl(src.ItemImageUrl)
			{}
			
		FCatalogItem(const TSharedPtr<FJsonObject>& obj) : FCatalogItem()
        {
            readFromValue(obj);
        }
		
		~FCatalogItem();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FCharacterLeaderboardEntry : public FPlayFabBaseModel
    {
		
		// [optional] PlayFab unique identifier of the user for this leaderboard entry.
		FString PlayFabId;
		// [optional] PlayFab unique identifier of the character that belongs to the user for this leaderboard entry.
		FString CharacterId;
		// [optional] Title-specific display name of the character for this leaderboard entry.
		FString CharacterName;
		// [optional] Title-specific display name of the user for this leaderboard entry.
		FString DisplayName;
		// [optional] Name of the character class for this entry.
		FString CharacterType;
		// Specific value of the user's statistic.
		int32 StatValue;
		// User's overall position in the leaderboard.
		int32 Position;
	
        FCharacterLeaderboardEntry() :
			FPlayFabBaseModel(),
			PlayFabId(),
			CharacterId(),
			CharacterName(),
			DisplayName(),
			CharacterType(),
			StatValue(0),
			Position(0)
			{}
		
		FCharacterLeaderboardEntry(const FCharacterLeaderboardEntry& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			CharacterId(src.CharacterId),
			CharacterName(src.CharacterName),
			DisplayName(src.DisplayName),
			CharacterType(src.CharacterType),
			StatValue(src.StatValue),
			Position(src.Position)
			{}
			
		FCharacterLeaderboardEntry(const TSharedPtr<FJsonObject>& obj) : FCharacterLeaderboardEntry()
        {
            readFromValue(obj);
        }
		
		~FCharacterLeaderboardEntry();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FCharacterResult : public FPlayFabBaseModel
    {
		
		// [optional] The id for this character on this player.
		FString CharacterId;
		// [optional] The name of this character.
		FString CharacterName;
		// [optional] The type-string that was given to this character on creation.
		FString CharacterType;
	
        FCharacterResult() :
			FPlayFabBaseModel(),
			CharacterId(),
			CharacterName(),
			CharacterType()
			{}
		
		FCharacterResult(const FCharacterResult& src) :
			FPlayFabBaseModel(),
			CharacterId(src.CharacterId),
			CharacterName(src.CharacterName),
			CharacterType(src.CharacterType)
			{}
			
		FCharacterResult(const TSharedPtr<FJsonObject>& obj) : FCharacterResult()
        {
            readFromValue(obj);
        }
		
		~FCharacterResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FConsumeItemRequest : public FPlayFabBaseModel
    {
		
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// Unique instance identifier of the item to be consumed.
		FString ItemInstanceId;
		// Number of uses to consume from the item.
		int32 ConsumeCount;
		// [optional] Unique PlayFab assigned ID for a specific character owned by a user
		FString CharacterId;
	
        FConsumeItemRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			ItemInstanceId(),
			ConsumeCount(0),
			CharacterId()
			{}
		
		FConsumeItemRequest(const FConsumeItemRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			ItemInstanceId(src.ItemInstanceId),
			ConsumeCount(src.ConsumeCount),
			CharacterId(src.CharacterId)
			{}
			
		FConsumeItemRequest(const TSharedPtr<FJsonObject>& obj) : FConsumeItemRequest()
        {
            readFromValue(obj);
        }
		
		~FConsumeItemRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FConsumeItemResult : public FPlayFabBaseModel
    {
		
		// [optional] Unique instance identifier of the item with uses consumed.
		FString ItemInstanceId;
		// Number of uses remaining on the item.
		int32 RemainingUses;
	
        FConsumeItemResult() :
			FPlayFabBaseModel(),
			ItemInstanceId(),
			RemainingUses(0)
			{}
		
		FConsumeItemResult(const FConsumeItemResult& src) :
			FPlayFabBaseModel(),
			ItemInstanceId(src.ItemInstanceId),
			RemainingUses(src.RemainingUses)
			{}
			
		FConsumeItemResult(const TSharedPtr<FJsonObject>& obj) : FConsumeItemResult()
        {
            readFromValue(obj);
        }
		
		~FConsumeItemResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FCreateSharedGroupRequest : public FPlayFabBaseModel
    {
		
		// [optional] Unique identifier for the shared group (a random identifier will be assigned, if one is not specified).
		FString SharedGroupId;
	
        FCreateSharedGroupRequest() :
			FPlayFabBaseModel(),
			SharedGroupId()
			{}
		
		FCreateSharedGroupRequest(const FCreateSharedGroupRequest& src) :
			FPlayFabBaseModel(),
			SharedGroupId(src.SharedGroupId)
			{}
			
		FCreateSharedGroupRequest(const TSharedPtr<FJsonObject>& obj) : FCreateSharedGroupRequest()
        {
            readFromValue(obj);
        }
		
		~FCreateSharedGroupRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FCreateSharedGroupResult : public FPlayFabBaseModel
    {
		
		// [optional] Unique identifier for the shared group.
		FString SharedGroupId;
	
        FCreateSharedGroupResult() :
			FPlayFabBaseModel(),
			SharedGroupId()
			{}
		
		FCreateSharedGroupResult(const FCreateSharedGroupResult& src) :
			FPlayFabBaseModel(),
			SharedGroupId(src.SharedGroupId)
			{}
			
		FCreateSharedGroupResult(const TSharedPtr<FJsonObject>& obj) : FCreateSharedGroupResult()
        {
            readFromValue(obj);
        }
		
		~FCreateSharedGroupResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FDeleteCharacterFromUserRequest : public FPlayFabBaseModel
    {
		
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// Unique PlayFab assigned ID for a specific character owned by a user
		FString CharacterId;
		// If true, the character's inventory will be transferred up to the owning user; otherwise, this request will purge those items.
		bool SaveCharacterInventory;
	
        FDeleteCharacterFromUserRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			CharacterId(),
			SaveCharacterInventory(false)
			{}
		
		FDeleteCharacterFromUserRequest(const FDeleteCharacterFromUserRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			CharacterId(src.CharacterId),
			SaveCharacterInventory(src.SaveCharacterInventory)
			{}
			
		FDeleteCharacterFromUserRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteCharacterFromUserRequest()
        {
            readFromValue(obj);
        }
		
		~FDeleteCharacterFromUserRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FDeleteCharacterFromUserResult : public FPlayFabBaseModel
    {
		
	
        FDeleteCharacterFromUserResult() :
			FPlayFabBaseModel()
			{}
		
		FDeleteCharacterFromUserResult(const FDeleteCharacterFromUserResult& src) :
			FPlayFabBaseModel()
			{}
			
		FDeleteCharacterFromUserResult(const TSharedPtr<FJsonObject>& obj) : FDeleteCharacterFromUserResult()
        {
            readFromValue(obj);
        }
		
		~FDeleteCharacterFromUserResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FDeleteSharedGroupRequest : public FPlayFabBaseModel
    {
		
		// [optional] Unique identifier for the shared group.
		FString SharedGroupId;
	
        FDeleteSharedGroupRequest() :
			FPlayFabBaseModel(),
			SharedGroupId()
			{}
		
		FDeleteSharedGroupRequest(const FDeleteSharedGroupRequest& src) :
			FPlayFabBaseModel(),
			SharedGroupId(src.SharedGroupId)
			{}
			
		FDeleteSharedGroupRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteSharedGroupRequest()
        {
            readFromValue(obj);
        }
		
		~FDeleteSharedGroupRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FDeleteUsersRequest : public FPlayFabBaseModel
    {
		
		// An array of unique PlayFab assigned ID of the user on whom the operation will be performed.
		TArray<FString> PlayFabIds;
		// Unique identifier for the title, found in the Settings > Game Properties section of the PlayFab developer site when a title has been selected
		FString TitleId;
	
        FDeleteUsersRequest() :
			FPlayFabBaseModel(),
			PlayFabIds(),
			TitleId()
			{}
		
		FDeleteUsersRequest(const FDeleteUsersRequest& src) :
			FPlayFabBaseModel(),
			PlayFabIds(src.PlayFabIds),
			TitleId(src.TitleId)
			{}
			
		FDeleteUsersRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteUsersRequest()
        {
            readFromValue(obj);
        }
		
		~FDeleteUsersRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FDeleteUsersResult : public FPlayFabBaseModel
    {
		
	
        FDeleteUsersResult() :
			FPlayFabBaseModel()
			{}
		
		FDeleteUsersResult(const FDeleteUsersResult& src) :
			FPlayFabBaseModel()
			{}
			
		FDeleteUsersResult(const TSharedPtr<FJsonObject>& obj) : FDeleteUsersResult()
        {
            readFromValue(obj);
        }
		
		~FDeleteUsersResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FEmptyResult : public FPlayFabBaseModel
    {
		
	
        FEmptyResult() :
			FPlayFabBaseModel()
			{}
		
		FEmptyResult(const FEmptyResult& src) :
			FPlayFabBaseModel()
			{}
			
		FEmptyResult(const TSharedPtr<FJsonObject>& obj) : FEmptyResult()
        {
            readFromValue(obj);
        }
		
		~FEmptyResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FFacebookPlayFabIdPair : public FPlayFabBaseModel
    {
		
		// [optional] Unique Facebook identifier for a user.
		FString FacebookId;
		// [optional] Unique PlayFab identifier for a user, or null if no PlayFab account is linked to the Facebook identifier.
		FString PlayFabId;
	
        FFacebookPlayFabIdPair() :
			FPlayFabBaseModel(),
			FacebookId(),
			PlayFabId()
			{}
		
		FFacebookPlayFabIdPair(const FFacebookPlayFabIdPair& src) :
			FPlayFabBaseModel(),
			FacebookId(src.FacebookId),
			PlayFabId(src.PlayFabId)
			{}
			
		FFacebookPlayFabIdPair(const TSharedPtr<FJsonObject>& obj) : FFacebookPlayFabIdPair()
        {
            readFromValue(obj);
        }
		
		~FFacebookPlayFabIdPair();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FFriendInfo : public FPlayFabBaseModel
    {
		
		// [optional] PlayFab unique identifier for this friend.
		FString FriendPlayFabId;
		// [optional] PlayFab unique username for this friend.
		FString Username;
		// [optional] Title-specific display name for this friend.
		FString TitleDisplayName;
		// [optional] Tags which have been associated with this friend.
		TArray<FString> Tags;
		// [optional] Unique lobby identifier of the Game Server Instance to which this player is currently connected.
		FString CurrentMatchmakerLobbyId;
		// [optional] Available Facebook information (if the user and PlayFab friend are also connected in Facebook).
		TSharedPtr<FUserFacebookInfo> FacebookInfo;
		// [optional] Available Steam information (if the user and PlayFab friend are also connected in Steam).
		TSharedPtr<FUserSteamInfo> SteamInfo;
		// [optional] Available Game Center information (if the user and PlayFab friend are also connected in Game Center).
		TSharedPtr<FUserGameCenterInfo> GameCenterInfo;
	
        FFriendInfo() :
			FPlayFabBaseModel(),
			FriendPlayFabId(),
			Username(),
			TitleDisplayName(),
			Tags(),
			CurrentMatchmakerLobbyId(),
			FacebookInfo(nullptr),
			SteamInfo(nullptr),
			GameCenterInfo(nullptr)
			{}
		
		FFriendInfo(const FFriendInfo& src) :
			FPlayFabBaseModel(),
			FriendPlayFabId(src.FriendPlayFabId),
			Username(src.Username),
			TitleDisplayName(src.TitleDisplayName),
			Tags(src.Tags),
			CurrentMatchmakerLobbyId(src.CurrentMatchmakerLobbyId),
			FacebookInfo(src.FacebookInfo.IsValid() ? MakeShareable(new FUserFacebookInfo(*src.FacebookInfo)) : nullptr),
			SteamInfo(src.SteamInfo.IsValid() ? MakeShareable(new FUserSteamInfo(*src.SteamInfo)) : nullptr),
			GameCenterInfo(src.GameCenterInfo.IsValid() ? MakeShareable(new FUserGameCenterInfo(*src.GameCenterInfo)) : nullptr)
			{}
			
		FFriendInfo(const TSharedPtr<FJsonObject>& obj) : FFriendInfo()
        {
            readFromValue(obj);
        }
		
		~FFriendInfo();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetCatalogItemsRequest : public FPlayFabBaseModel
    {
		
		// [optional] Which catalog is being requested.
		FString CatalogVersion;
	
        FGetCatalogItemsRequest() :
			FPlayFabBaseModel(),
			CatalogVersion()
			{}
		
		FGetCatalogItemsRequest(const FGetCatalogItemsRequest& src) :
			FPlayFabBaseModel(),
			CatalogVersion(src.CatalogVersion)
			{}
			
		FGetCatalogItemsRequest(const TSharedPtr<FJsonObject>& obj) : FGetCatalogItemsRequest()
        {
            readFromValue(obj);
        }
		
		~FGetCatalogItemsRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetCatalogItemsResult : public FPlayFabBaseModel
    {
		
		// [optional] Array of items which can be purchased.
		TArray<FCatalogItem> Catalog;
	
        FGetCatalogItemsResult() :
			FPlayFabBaseModel(),
			Catalog()
			{}
		
		FGetCatalogItemsResult(const FGetCatalogItemsResult& src) :
			FPlayFabBaseModel(),
			Catalog(src.Catalog)
			{}
			
		FGetCatalogItemsResult(const TSharedPtr<FJsonObject>& obj) : FGetCatalogItemsResult()
        {
            readFromValue(obj);
        }
		
		~FGetCatalogItemsResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetCharacterDataRequest : public FPlayFabBaseModel
    {
		
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// Unique PlayFab assigned ID for a specific character owned by a user
		FString CharacterId;
		// [optional] Specific keys to search for in the custom user data.
		TArray<FString> Keys;
		// [optional] The version that currently exists according to the caller. The call will return the data for all of the keys if the version in the system is greater than this.
		OptionalInt32 IfChangedFromDataVersion;
	
        FGetCharacterDataRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			CharacterId(),
			Keys(),
			IfChangedFromDataVersion()
			{}
		
		FGetCharacterDataRequest(const FGetCharacterDataRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			CharacterId(src.CharacterId),
			Keys(src.Keys),
			IfChangedFromDataVersion(src.IfChangedFromDataVersion)
			{}
			
		FGetCharacterDataRequest(const TSharedPtr<FJsonObject>& obj) : FGetCharacterDataRequest()
        {
            readFromValue(obj);
        }
		
		~FGetCharacterDataRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	enum UserDataPermission
	{
		UserDataPermissionPrivate,
		UserDataPermissionPublic
	};
	
	void writeUserDataPermissionEnumJSON(UserDataPermission enumVal, JsonWriter& writer);
	UserDataPermission readUserDataPermissionFromValue(const TSharedPtr<FJsonValue>& value);
	
	
	struct PLAYFAB_API FUserDataRecord : public FPlayFabBaseModel
    {
		
		// [optional] User-supplied data for this user data key.
		FString Value;
		// Timestamp indicating when this data was last updated.
		FDateTime LastUpdated;
		// [optional] Permissions on this data key.
		Boxed<UserDataPermission> Permission;
	
        FUserDataRecord() :
			FPlayFabBaseModel(),
			Value(),
			LastUpdated(0),
			Permission()
			{}
		
		FUserDataRecord(const FUserDataRecord& src) :
			FPlayFabBaseModel(),
			Value(src.Value),
			LastUpdated(src.LastUpdated),
			Permission(src.Permission)
			{}
			
		FUserDataRecord(const TSharedPtr<FJsonObject>& obj) : FUserDataRecord()
        {
            readFromValue(obj);
        }
		
		~FUserDataRecord();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetCharacterDataResult : public FPlayFabBaseModel
    {
		
		// [optional] Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// Indicates the current version of the data that has been set. This is incremented with every set call for that type of data (read-only, internal, etc). This version can be provided in Get calls to find updated data.
		uint32 DataVersion;
		// [optional] User specific data for this title.
		TMap<FString, FUserDataRecord> Data;
		// [optional] Unique PlayFab assigned ID for a specific character owned by a user
		FString CharacterId;
	
        FGetCharacterDataResult() :
			FPlayFabBaseModel(),
			PlayFabId(),
			DataVersion(0),
			Data(),
			CharacterId()
			{}
		
		FGetCharacterDataResult(const FGetCharacterDataResult& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			DataVersion(src.DataVersion),
			Data(src.Data),
			CharacterId(src.CharacterId)
			{}
			
		FGetCharacterDataResult(const TSharedPtr<FJsonObject>& obj) : FGetCharacterDataResult()
        {
            readFromValue(obj);
        }
		
		~FGetCharacterDataResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetCharacterInventoryRequest : public FPlayFabBaseModel
    {
		
		// [optional] Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// Unique PlayFab assigned ID for a specific character owned by a user
		FString CharacterId;
		// [optional] Used to limit results to only those from a specific catalog version.
		FString CatalogVersion;
	
        FGetCharacterInventoryRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			CharacterId(),
			CatalogVersion()
			{}
		
		FGetCharacterInventoryRequest(const FGetCharacterInventoryRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			CharacterId(src.CharacterId),
			CatalogVersion(src.CatalogVersion)
			{}
			
		FGetCharacterInventoryRequest(const TSharedPtr<FJsonObject>& obj) : FGetCharacterInventoryRequest()
        {
            readFromValue(obj);
        }
		
		~FGetCharacterInventoryRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FItemInstance : public FPlayFabBaseModel
    {
		
		// [optional] Unique identifier for the inventory item, as defined in the catalog.
		FString ItemId;
		// [optional] Unique item identifier for this specific instance of the item.
		FString ItemInstanceId;
		// [optional] Class name for the inventory item, as defined in the catalog.
		FString ItemClass;
		// [optional] Timestamp for when this instance was purchased.
		OptionalTime PurchaseDate;
		// [optional] Timestamp for when this instance will expire.
		OptionalTime Expiration;
		// [optional] Total number of remaining uses, if this is a consumable item.
		OptionalInt32 RemainingUses;
		// [optional] The number of uses that were added or removed to this item in this call.
		OptionalInt32 UsesIncrementedBy;
		// [optional] Game specific comment associated with this instance when it was added to the user inventory.
		FString Annotation;
		// [optional] Catalog version for the inventory item, when this instance was created.
		FString CatalogVersion;
		// [optional] Unique identifier for the parent inventory item, as defined in the catalog, for object which were added from a bundle or container.
		FString BundleParent;
		// [optional] CatalogItem.DisplayName at the time this item was purchased.
		FString DisplayName;
		// [optional] Currency type for the cost of the catalog item.
		FString UnitCurrency;
		// Cost of the catalog item in the given currency.
		uint32 UnitPrice;
		// [optional] Array of unique items that were awarded when this catalog item was purchased.
		TArray<FString> BundleContents;
		// [optional] A set of custom key-value pairs on the inventory item.
		TMap<FString, FString> CustomData;
	
        FItemInstance() :
			FPlayFabBaseModel(),
			ItemId(),
			ItemInstanceId(),
			ItemClass(),
			PurchaseDate(),
			Expiration(),
			RemainingUses(),
			UsesIncrementedBy(),
			Annotation(),
			CatalogVersion(),
			BundleParent(),
			DisplayName(),
			UnitCurrency(),
			UnitPrice(0),
			BundleContents(),
			CustomData()
			{}
		
		FItemInstance(const FItemInstance& src) :
			FPlayFabBaseModel(),
			ItemId(src.ItemId),
			ItemInstanceId(src.ItemInstanceId),
			ItemClass(src.ItemClass),
			PurchaseDate(src.PurchaseDate),
			Expiration(src.Expiration),
			RemainingUses(src.RemainingUses),
			UsesIncrementedBy(src.UsesIncrementedBy),
			Annotation(src.Annotation),
			CatalogVersion(src.CatalogVersion),
			BundleParent(src.BundleParent),
			DisplayName(src.DisplayName),
			UnitCurrency(src.UnitCurrency),
			UnitPrice(src.UnitPrice),
			BundleContents(src.BundleContents),
			CustomData(src.CustomData)
			{}
			
		FItemInstance(const TSharedPtr<FJsonObject>& obj) : FItemInstance()
        {
            readFromValue(obj);
        }
		
		~FItemInstance();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FVirtualCurrencyRechargeTime : public FPlayFabBaseModel
    {
		
		// Time remaining (in seconds) before the next recharge increment of the virtual currency.
		int32 SecondsToRecharge;
		// Server timestamp in UTC indicating the next time the virtual currency will be incremented.
		FDateTime RechargeTime;
		// Maximum value to which the regenerating currency will automatically increment. Note that it can exceed this value through use of the AddUserVirtualCurrency API call. However, it will not regenerate automatically until it has fallen below this value.
		int32 RechargeMax;
	
        FVirtualCurrencyRechargeTime() :
			FPlayFabBaseModel(),
			SecondsToRecharge(0),
			RechargeTime(0),
			RechargeMax(0)
			{}
		
		FVirtualCurrencyRechargeTime(const FVirtualCurrencyRechargeTime& src) :
			FPlayFabBaseModel(),
			SecondsToRecharge(src.SecondsToRecharge),
			RechargeTime(src.RechargeTime),
			RechargeMax(src.RechargeMax)
			{}
			
		FVirtualCurrencyRechargeTime(const TSharedPtr<FJsonObject>& obj) : FVirtualCurrencyRechargeTime()
        {
            readFromValue(obj);
        }
		
		~FVirtualCurrencyRechargeTime();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetCharacterInventoryResult : public FPlayFabBaseModel
    {
		
		// [optional] PlayFab unique identifier of the user whose character inventory is being returned.
		FString PlayFabId;
		// [optional] Unique identifier of the character for this inventory.
		FString CharacterId;
		// [optional] Array of inventory items belonging to the character.
		TArray<FItemInstance> Inventory;
		// [optional] Array of virtual currency balance(s) belonging to the character.
		TMap<FString, int32> VirtualCurrency;
		// [optional] Array of remaining times and timestamps for virtual currencies.
		TMap<FString, FVirtualCurrencyRechargeTime> VirtualCurrencyRechargeTimes;
	
        FGetCharacterInventoryResult() :
			FPlayFabBaseModel(),
			PlayFabId(),
			CharacterId(),
			Inventory(),
			VirtualCurrency(),
			VirtualCurrencyRechargeTimes()
			{}
		
		FGetCharacterInventoryResult(const FGetCharacterInventoryResult& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			CharacterId(src.CharacterId),
			Inventory(src.Inventory),
			VirtualCurrency(src.VirtualCurrency),
			VirtualCurrencyRechargeTimes(src.VirtualCurrencyRechargeTimes)
			{}
			
		FGetCharacterInventoryResult(const TSharedPtr<FJsonObject>& obj) : FGetCharacterInventoryResult()
        {
            readFromValue(obj);
        }
		
		~FGetCharacterInventoryResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetCharacterLeaderboardRequest : public FPlayFabBaseModel
    {
		
		// Unique PlayFab assigned ID for a specific character owned by a user
		FString CharacterId;
		// [optional] Optional character type on which to filter the leaderboard entries.
		FString CharacterType;
		// Unique identifier for the title-specific statistic for the leaderboard.
		FString StatisticName;
		// First entry in the leaderboard to be retrieved.
		int32 StartPosition;
		// Maximum number of entries to retrieve.
		int32 MaxResultsCount;
	
        FGetCharacterLeaderboardRequest() :
			FPlayFabBaseModel(),
			CharacterId(),
			CharacterType(),
			StatisticName(),
			StartPosition(0),
			MaxResultsCount(0)
			{}
		
		FGetCharacterLeaderboardRequest(const FGetCharacterLeaderboardRequest& src) :
			FPlayFabBaseModel(),
			CharacterId(src.CharacterId),
			CharacterType(src.CharacterType),
			StatisticName(src.StatisticName),
			StartPosition(src.StartPosition),
			MaxResultsCount(src.MaxResultsCount)
			{}
			
		FGetCharacterLeaderboardRequest(const TSharedPtr<FJsonObject>& obj) : FGetCharacterLeaderboardRequest()
        {
            readFromValue(obj);
        }
		
		~FGetCharacterLeaderboardRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetCharacterLeaderboardResult : public FPlayFabBaseModel
    {
		
		// [optional] Ordered list of leaderboard entries.
		TArray<FCharacterLeaderboardEntry> Leaderboard;
	
        FGetCharacterLeaderboardResult() :
			FPlayFabBaseModel(),
			Leaderboard()
			{}
		
		FGetCharacterLeaderboardResult(const FGetCharacterLeaderboardResult& src) :
			FPlayFabBaseModel(),
			Leaderboard(src.Leaderboard)
			{}
			
		FGetCharacterLeaderboardResult(const TSharedPtr<FJsonObject>& obj) : FGetCharacterLeaderboardResult()
        {
            readFromValue(obj);
        }
		
		~FGetCharacterLeaderboardResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetCharacterStatisticsRequest : public FPlayFabBaseModel
    {
		
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// Unique PlayFab assigned ID for a specific character owned by a user
		FString CharacterId;
	
        FGetCharacterStatisticsRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			CharacterId()
			{}
		
		FGetCharacterStatisticsRequest(const FGetCharacterStatisticsRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			CharacterId(src.CharacterId)
			{}
			
		FGetCharacterStatisticsRequest(const TSharedPtr<FJsonObject>& obj) : FGetCharacterStatisticsRequest()
        {
            readFromValue(obj);
        }
		
		~FGetCharacterStatisticsRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetCharacterStatisticsResult : public FPlayFabBaseModel
    {
		
		// [optional] PlayFab unique identifier of the user whose character statistics are being returned.
		FString PlayFabId;
		// [optional] Unique identifier of the character for the statistics.
		FString CharacterId;
		// [optional] Character statistics for the requested user.
		TMap<FString, int32> CharacterStatistics;
	
        FGetCharacterStatisticsResult() :
			FPlayFabBaseModel(),
			PlayFabId(),
			CharacterId(),
			CharacterStatistics()
			{}
		
		FGetCharacterStatisticsResult(const FGetCharacterStatisticsResult& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			CharacterId(src.CharacterId),
			CharacterStatistics(src.CharacterStatistics)
			{}
			
		FGetCharacterStatisticsResult(const TSharedPtr<FJsonObject>& obj) : FGetCharacterStatisticsResult()
        {
            readFromValue(obj);
        }
		
		~FGetCharacterStatisticsResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetCloudScriptUrlRequest : public FPlayFabBaseModel
    {
		
		// [optional] Cloud Script Version to use. Defaults to 1.
		OptionalInt32 Version;
		// [optional] Specifies whether the URL returned should be the one for the most recently uploaded Revision of the Cloud Script (true), or the Revision most recently set to live (false). Defaults to false.
		OptionalBool Testing;
	
        FGetCloudScriptUrlRequest() :
			FPlayFabBaseModel(),
			Version(),
			Testing()
			{}
		
		FGetCloudScriptUrlRequest(const FGetCloudScriptUrlRequest& src) :
			FPlayFabBaseModel(),
			Version(src.Version),
			Testing(src.Testing)
			{}
			
		FGetCloudScriptUrlRequest(const TSharedPtr<FJsonObject>& obj) : FGetCloudScriptUrlRequest()
        {
            readFromValue(obj);
        }
		
		~FGetCloudScriptUrlRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetCloudScriptUrlResult : public FPlayFabBaseModel
    {
		
		// [optional] URL of the Cloud Script logic server.
		FString Url;
	
        FGetCloudScriptUrlResult() :
			FPlayFabBaseModel(),
			Url()
			{}
		
		FGetCloudScriptUrlResult(const FGetCloudScriptUrlResult& src) :
			FPlayFabBaseModel(),
			Url(src.Url)
			{}
			
		FGetCloudScriptUrlResult(const TSharedPtr<FJsonObject>& obj) : FGetCloudScriptUrlResult()
        {
            readFromValue(obj);
        }
		
		~FGetCloudScriptUrlResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetContentDownloadUrlRequest : public FPlayFabBaseModel
    {
		
		// Key of the content item to fetch, usually formatted as a path, e.g. images/a.png
		FString Key;
		// [optional] HTTP method to fetch item - GET or HEAD. Use HEAD when only fetching metadata. Default is GET.
		FString HttpMethod;
		// [optional] True if download through CDN. CDN provides better download bandwidth and time. However, if you want latest, non-cached version of the content, set this to false. Default is true.
		OptionalBool ThruCDN;
	
        FGetContentDownloadUrlRequest() :
			FPlayFabBaseModel(),
			Key(),
			HttpMethod(),
			ThruCDN()
			{}
		
		FGetContentDownloadUrlRequest(const FGetContentDownloadUrlRequest& src) :
			FPlayFabBaseModel(),
			Key(src.Key),
			HttpMethod(src.HttpMethod),
			ThruCDN(src.ThruCDN)
			{}
			
		FGetContentDownloadUrlRequest(const TSharedPtr<FJsonObject>& obj) : FGetContentDownloadUrlRequest()
        {
            readFromValue(obj);
        }
		
		~FGetContentDownloadUrlRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetContentDownloadUrlResult : public FPlayFabBaseModel
    {
		
		// [optional] URL for downloading content via HTTP GET or HEAD method. The URL will expire in 1 hour.
		FString URL;
	
        FGetContentDownloadUrlResult() :
			FPlayFabBaseModel(),
			URL()
			{}
		
		FGetContentDownloadUrlResult(const FGetContentDownloadUrlResult& src) :
			FPlayFabBaseModel(),
			URL(src.URL)
			{}
			
		FGetContentDownloadUrlResult(const TSharedPtr<FJsonObject>& obj) : FGetContentDownloadUrlResult()
        {
            readFromValue(obj);
        }
		
		~FGetContentDownloadUrlResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetLeaderboardAroundCharacterRequest : public FPlayFabBaseModel
    {
		
		// Unique identifier for the title-specific statistic for the leaderboard.
		FString StatisticName;
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// Unique PlayFab assigned ID for a specific character owned by a user
		FString CharacterId;
		// [optional] Optional character type on which to filter the leaderboard entries.
		FString CharacterType;
		// Maximum number of entries to retrieve.
		int32 MaxResultsCount;
	
        FGetLeaderboardAroundCharacterRequest() :
			FPlayFabBaseModel(),
			StatisticName(),
			PlayFabId(),
			CharacterId(),
			CharacterType(),
			MaxResultsCount(0)
			{}
		
		FGetLeaderboardAroundCharacterRequest(const FGetLeaderboardAroundCharacterRequest& src) :
			FPlayFabBaseModel(),
			StatisticName(src.StatisticName),
			PlayFabId(src.PlayFabId),
			CharacterId(src.CharacterId),
			CharacterType(src.CharacterType),
			MaxResultsCount(src.MaxResultsCount)
			{}
			
		FGetLeaderboardAroundCharacterRequest(const TSharedPtr<FJsonObject>& obj) : FGetLeaderboardAroundCharacterRequest()
        {
            readFromValue(obj);
        }
		
		~FGetLeaderboardAroundCharacterRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetLeaderboardAroundCharacterResult : public FPlayFabBaseModel
    {
		
		// [optional] Ordered list of leaderboard entries.
		TArray<FCharacterLeaderboardEntry> Leaderboard;
	
        FGetLeaderboardAroundCharacterResult() :
			FPlayFabBaseModel(),
			Leaderboard()
			{}
		
		FGetLeaderboardAroundCharacterResult(const FGetLeaderboardAroundCharacterResult& src) :
			FPlayFabBaseModel(),
			Leaderboard(src.Leaderboard)
			{}
			
		FGetLeaderboardAroundCharacterResult(const TSharedPtr<FJsonObject>& obj) : FGetLeaderboardAroundCharacterResult()
        {
            readFromValue(obj);
        }
		
		~FGetLeaderboardAroundCharacterResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetLeaderboardAroundUserRequest : public FPlayFabBaseModel
    {
		
		// Unique identifier for the title-specific statistic for the leaderboard.
		FString StatisticName;
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// Maximum number of entries to retrieve.
		int32 MaxResultsCount;
	
        FGetLeaderboardAroundUserRequest() :
			FPlayFabBaseModel(),
			StatisticName(),
			PlayFabId(),
			MaxResultsCount(0)
			{}
		
		FGetLeaderboardAroundUserRequest(const FGetLeaderboardAroundUserRequest& src) :
			FPlayFabBaseModel(),
			StatisticName(src.StatisticName),
			PlayFabId(src.PlayFabId),
			MaxResultsCount(src.MaxResultsCount)
			{}
			
		FGetLeaderboardAroundUserRequest(const TSharedPtr<FJsonObject>& obj) : FGetLeaderboardAroundUserRequest()
        {
            readFromValue(obj);
        }
		
		~FGetLeaderboardAroundUserRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FPlayerLeaderboardEntry : public FPlayFabBaseModel
    {
		
		// [optional] PlayFab unique identifier of the user for this leaderboard entry.
		FString PlayFabId;
		// [optional] Title-specific display name of the user for this leaderboard entry.
		FString DisplayName;
		// Specific value of the user's statistic.
		int32 StatValue;
		// User's overall position in the leaderboard.
		int32 Position;
	
        FPlayerLeaderboardEntry() :
			FPlayFabBaseModel(),
			PlayFabId(),
			DisplayName(),
			StatValue(0),
			Position(0)
			{}
		
		FPlayerLeaderboardEntry(const FPlayerLeaderboardEntry& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			DisplayName(src.DisplayName),
			StatValue(src.StatValue),
			Position(src.Position)
			{}
			
		FPlayerLeaderboardEntry(const TSharedPtr<FJsonObject>& obj) : FPlayerLeaderboardEntry()
        {
            readFromValue(obj);
        }
		
		~FPlayerLeaderboardEntry();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetLeaderboardAroundUserResult : public FPlayFabBaseModel
    {
		
		// [optional] Ordered list of leaderboard entries.
		TArray<FPlayerLeaderboardEntry> Leaderboard;
	
        FGetLeaderboardAroundUserResult() :
			FPlayFabBaseModel(),
			Leaderboard()
			{}
		
		FGetLeaderboardAroundUserResult(const FGetLeaderboardAroundUserResult& src) :
			FPlayFabBaseModel(),
			Leaderboard(src.Leaderboard)
			{}
			
		FGetLeaderboardAroundUserResult(const TSharedPtr<FJsonObject>& obj) : FGetLeaderboardAroundUserResult()
        {
            readFromValue(obj);
        }
		
		~FGetLeaderboardAroundUserResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetLeaderboardForUsersCharactersRequest : public FPlayFabBaseModel
    {
		
		// Unique identifier for the title-specific statistic for the leaderboard.
		FString StatisticName;
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// Maximum number of entries to retrieve.
		int32 MaxResultsCount;
	
        FGetLeaderboardForUsersCharactersRequest() :
			FPlayFabBaseModel(),
			StatisticName(),
			PlayFabId(),
			MaxResultsCount(0)
			{}
		
		FGetLeaderboardForUsersCharactersRequest(const FGetLeaderboardForUsersCharactersRequest& src) :
			FPlayFabBaseModel(),
			StatisticName(src.StatisticName),
			PlayFabId(src.PlayFabId),
			MaxResultsCount(src.MaxResultsCount)
			{}
			
		FGetLeaderboardForUsersCharactersRequest(const TSharedPtr<FJsonObject>& obj) : FGetLeaderboardForUsersCharactersRequest()
        {
            readFromValue(obj);
        }
		
		~FGetLeaderboardForUsersCharactersRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetLeaderboardForUsersCharactersResult : public FPlayFabBaseModel
    {
		
		// [optional] Ordered list of leaderboard entries.
		TArray<FCharacterLeaderboardEntry> Leaderboard;
	
        FGetLeaderboardForUsersCharactersResult() :
			FPlayFabBaseModel(),
			Leaderboard()
			{}
		
		FGetLeaderboardForUsersCharactersResult(const FGetLeaderboardForUsersCharactersResult& src) :
			FPlayFabBaseModel(),
			Leaderboard(src.Leaderboard)
			{}
			
		FGetLeaderboardForUsersCharactersResult(const TSharedPtr<FJsonObject>& obj) : FGetLeaderboardForUsersCharactersResult()
        {
            readFromValue(obj);
        }
		
		~FGetLeaderboardForUsersCharactersResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetLeaderboardRequest : public FPlayFabBaseModel
    {
		
		// Unique identifier for the title-specific statistic for the leaderboard.
		FString StatisticName;
		// First entry in the leaderboard to be retrieved.
		int32 StartPosition;
		// Maximum number of entries to retrieve.
		int32 MaxResultsCount;
	
        FGetLeaderboardRequest() :
			FPlayFabBaseModel(),
			StatisticName(),
			StartPosition(0),
			MaxResultsCount(0)
			{}
		
		FGetLeaderboardRequest(const FGetLeaderboardRequest& src) :
			FPlayFabBaseModel(),
			StatisticName(src.StatisticName),
			StartPosition(src.StartPosition),
			MaxResultsCount(src.MaxResultsCount)
			{}
			
		FGetLeaderboardRequest(const TSharedPtr<FJsonObject>& obj) : FGetLeaderboardRequest()
        {
            readFromValue(obj);
        }
		
		~FGetLeaderboardRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetLeaderboardResult : public FPlayFabBaseModel
    {
		
		// [optional] Ordered list of leaderboard entries.
		TArray<FPlayerLeaderboardEntry> Leaderboard;
	
        FGetLeaderboardResult() :
			FPlayFabBaseModel(),
			Leaderboard()
			{}
		
		FGetLeaderboardResult(const FGetLeaderboardResult& src) :
			FPlayFabBaseModel(),
			Leaderboard(src.Leaderboard)
			{}
			
		FGetLeaderboardResult(const TSharedPtr<FJsonObject>& obj) : FGetLeaderboardResult()
        {
            readFromValue(obj);
        }
		
		~FGetLeaderboardResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FStatisticNameVersion : public FPlayFabBaseModel
    {
		
		// unique name of the statistic
		FString StatisticName;
		// the version of the statistic to be returned
		uint32 Version;
	
        FStatisticNameVersion() :
			FPlayFabBaseModel(),
			StatisticName(),
			Version(0)
			{}
		
		FStatisticNameVersion(const FStatisticNameVersion& src) :
			FPlayFabBaseModel(),
			StatisticName(src.StatisticName),
			Version(src.Version)
			{}
			
		FStatisticNameVersion(const TSharedPtr<FJsonObject>& obj) : FStatisticNameVersion()
        {
            readFromValue(obj);
        }
		
		~FStatisticNameVersion();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetPlayerStatisticsRequest : public FPlayFabBaseModel
    {
		
		// user for whom statistics are being requested
		FString PlayFabId;
		// [optional] statistics to return
		TArray<FString> StatisticNames;
		// [optional] statistics to return, if StatisticNames is not set (only statistics which have a version matching that provided will be returned)
		TArray<FStatisticNameVersion> StatisticNameVersions;
	
        FGetPlayerStatisticsRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			StatisticNames(),
			StatisticNameVersions()
			{}
		
		FGetPlayerStatisticsRequest(const FGetPlayerStatisticsRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			StatisticNames(src.StatisticNames),
			StatisticNameVersions(src.StatisticNameVersions)
			{}
			
		FGetPlayerStatisticsRequest(const TSharedPtr<FJsonObject>& obj) : FGetPlayerStatisticsRequest()
        {
            readFromValue(obj);
        }
		
		~FGetPlayerStatisticsRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FStatisticValue : public FPlayFabBaseModel
    {
		
		// [optional] unique name of the statistic
		FString StatisticName;
		// statistic value for the player
		int32 Value;
		// [optional] for updates to an existing statistic value for a player, the version of the statistic when it was loaded
		FString Version;
	
        FStatisticValue() :
			FPlayFabBaseModel(),
			StatisticName(),
			Value(0),
			Version()
			{}
		
		FStatisticValue(const FStatisticValue& src) :
			FPlayFabBaseModel(),
			StatisticName(src.StatisticName),
			Value(src.Value),
			Version(src.Version)
			{}
			
		FStatisticValue(const TSharedPtr<FJsonObject>& obj) : FStatisticValue()
        {
            readFromValue(obj);
        }
		
		~FStatisticValue();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetPlayerStatisticsResult : public FPlayFabBaseModel
    {
		
		// [optional] PlayFab unique identifier of the user whose statistics are being returned
		FString PlayFabId;
		// [optional] User statistics for the requested user.
		TArray<FStatisticValue> Statistics;
	
        FGetPlayerStatisticsResult() :
			FPlayFabBaseModel(),
			PlayFabId(),
			Statistics()
			{}
		
		FGetPlayerStatisticsResult(const FGetPlayerStatisticsResult& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			Statistics(src.Statistics)
			{}
			
		FGetPlayerStatisticsResult(const TSharedPtr<FJsonObject>& obj) : FGetPlayerStatisticsResult()
        {
            readFromValue(obj);
        }
		
		~FGetPlayerStatisticsResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetPlayerStatisticVersionsRequest : public FPlayFabBaseModel
    {
		
		// [optional] unique name of the statistic
		FString StatisticName;
	
        FGetPlayerStatisticVersionsRequest() :
			FPlayFabBaseModel(),
			StatisticName()
			{}
		
		FGetPlayerStatisticVersionsRequest(const FGetPlayerStatisticVersionsRequest& src) :
			FPlayFabBaseModel(),
			StatisticName(src.StatisticName)
			{}
			
		FGetPlayerStatisticVersionsRequest(const TSharedPtr<FJsonObject>& obj) : FGetPlayerStatisticVersionsRequest()
        {
            readFromValue(obj);
        }
		
		~FGetPlayerStatisticVersionsRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FPlayerStatisticVersion : public FPlayFabBaseModel
    {
		
		// [optional] name of the statistic when the version became active
		FString StatisticName;
		// version of the statistic
		uint32 Version;
		// [optional] time at which the statistic version was scheduled to become active, based on the configured ResetInterval
		OptionalTime ScheduledActivationTime;
		// time when the statistic version became active
		FDateTime ActivationTime;
		// [optional] time at which the statistic version was scheduled to become inactive, based on the configured ResetInterval
		OptionalTime ScheduledDeactivationTime;
		// [optional] time when the statistic version became inactive due to statistic version incrementing
		OptionalTime DeactivationTime;
	
        FPlayerStatisticVersion() :
			FPlayFabBaseModel(),
			StatisticName(),
			Version(0),
			ScheduledActivationTime(),
			ActivationTime(0),
			ScheduledDeactivationTime(),
			DeactivationTime()
			{}
		
		FPlayerStatisticVersion(const FPlayerStatisticVersion& src) :
			FPlayFabBaseModel(),
			StatisticName(src.StatisticName),
			Version(src.Version),
			ScheduledActivationTime(src.ScheduledActivationTime),
			ActivationTime(src.ActivationTime),
			ScheduledDeactivationTime(src.ScheduledDeactivationTime),
			DeactivationTime(src.DeactivationTime)
			{}
			
		FPlayerStatisticVersion(const TSharedPtr<FJsonObject>& obj) : FPlayerStatisticVersion()
        {
            readFromValue(obj);
        }
		
		~FPlayerStatisticVersion();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetPlayerStatisticVersionsResult : public FPlayFabBaseModel
    {
		
		// [optional] version change history of the statistic
		TArray<FPlayerStatisticVersion> StatisticVersions;
	
        FGetPlayerStatisticVersionsResult() :
			FPlayFabBaseModel(),
			StatisticVersions()
			{}
		
		FGetPlayerStatisticVersionsResult(const FGetPlayerStatisticVersionsResult& src) :
			FPlayFabBaseModel(),
			StatisticVersions(src.StatisticVersions)
			{}
			
		FGetPlayerStatisticVersionsResult(const TSharedPtr<FJsonObject>& obj) : FGetPlayerStatisticVersionsResult()
        {
            readFromValue(obj);
        }
		
		~FGetPlayerStatisticVersionsResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetPlayFabIDsFromFacebookIDsRequest : public FPlayFabBaseModel
    {
		
		// Array of unique Facebook identifiers for which the title needs to get PlayFab identifiers.
		TArray<FString> FacebookIDs;
	
        FGetPlayFabIDsFromFacebookIDsRequest() :
			FPlayFabBaseModel(),
			FacebookIDs()
			{}
		
		FGetPlayFabIDsFromFacebookIDsRequest(const FGetPlayFabIDsFromFacebookIDsRequest& src) :
			FPlayFabBaseModel(),
			FacebookIDs(src.FacebookIDs)
			{}
			
		FGetPlayFabIDsFromFacebookIDsRequest(const TSharedPtr<FJsonObject>& obj) : FGetPlayFabIDsFromFacebookIDsRequest()
        {
            readFromValue(obj);
        }
		
		~FGetPlayFabIDsFromFacebookIDsRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetPlayFabIDsFromFacebookIDsResult : public FPlayFabBaseModel
    {
		
		// [optional] Mapping of Facebook identifiers to PlayFab identifiers.
		TArray<FFacebookPlayFabIdPair> Data;
	
        FGetPlayFabIDsFromFacebookIDsResult() :
			FPlayFabBaseModel(),
			Data()
			{}
		
		FGetPlayFabIDsFromFacebookIDsResult(const FGetPlayFabIDsFromFacebookIDsResult& src) :
			FPlayFabBaseModel(),
			Data(src.Data)
			{}
			
		FGetPlayFabIDsFromFacebookIDsResult(const TSharedPtr<FJsonObject>& obj) : FGetPlayFabIDsFromFacebookIDsResult()
        {
            readFromValue(obj);
        }
		
		~FGetPlayFabIDsFromFacebookIDsResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetPlayFabIDsFromSteamIDsRequest : public FPlayFabBaseModel
    {
		
		// [optional] Deprecated: Please use SteamStringIDs
		TArray<uint64> SteamIDs;
		// [optional] Array of unique Steam identifiers (Steam profile IDs) for which the title needs to get PlayFab identifiers.
		TArray<FString> SteamStringIDs;
	
        FGetPlayFabIDsFromSteamIDsRequest() :
			FPlayFabBaseModel(),
			SteamIDs(),
			SteamStringIDs()
			{}
		
		FGetPlayFabIDsFromSteamIDsRequest(const FGetPlayFabIDsFromSteamIDsRequest& src) :
			FPlayFabBaseModel(),
			SteamIDs(src.SteamIDs),
			SteamStringIDs(src.SteamStringIDs)
			{}
			
		FGetPlayFabIDsFromSteamIDsRequest(const TSharedPtr<FJsonObject>& obj) : FGetPlayFabIDsFromSteamIDsRequest()
        {
            readFromValue(obj);
        }
		
		~FGetPlayFabIDsFromSteamIDsRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FSteamPlayFabIdPair : public FPlayFabBaseModel
    {
		
		// Deprecated: Please use SteamStringId
		uint64 SteamId;
		// [optional] Unique Steam identifier for a user.
		FString SteamStringId;
		// [optional] Unique PlayFab identifier for a user, or null if no PlayFab account is linked to the Steam identifier.
		FString PlayFabId;
	
        FSteamPlayFabIdPair() :
			FPlayFabBaseModel(),
			SteamId(0),
			SteamStringId(),
			PlayFabId()
			{}
		
		FSteamPlayFabIdPair(const FSteamPlayFabIdPair& src) :
			FPlayFabBaseModel(),
			SteamId(src.SteamId),
			SteamStringId(src.SteamStringId),
			PlayFabId(src.PlayFabId)
			{}
			
		FSteamPlayFabIdPair(const TSharedPtr<FJsonObject>& obj) : FSteamPlayFabIdPair()
        {
            readFromValue(obj);
        }
		
		~FSteamPlayFabIdPair();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetPlayFabIDsFromSteamIDsResult : public FPlayFabBaseModel
    {
		
		// [optional] Mapping of Steam identifiers to PlayFab identifiers.
		TArray<FSteamPlayFabIdPair> Data;
	
        FGetPlayFabIDsFromSteamIDsResult() :
			FPlayFabBaseModel(),
			Data()
			{}
		
		FGetPlayFabIDsFromSteamIDsResult(const FGetPlayFabIDsFromSteamIDsResult& src) :
			FPlayFabBaseModel(),
			Data(src.Data)
			{}
			
		FGetPlayFabIDsFromSteamIDsResult(const TSharedPtr<FJsonObject>& obj) : FGetPlayFabIDsFromSteamIDsResult()
        {
            readFromValue(obj);
        }
		
		~FGetPlayFabIDsFromSteamIDsResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetPublisherDataRequest : public FPlayFabBaseModel
    {
		
		//  array of keys to get back data from the Publisher data blob, set by the admin tools
		TArray<FString> Keys;
	
        FGetPublisherDataRequest() :
			FPlayFabBaseModel(),
			Keys()
			{}
		
		FGetPublisherDataRequest(const FGetPublisherDataRequest& src) :
			FPlayFabBaseModel(),
			Keys(src.Keys)
			{}
			
		FGetPublisherDataRequest(const TSharedPtr<FJsonObject>& obj) : FGetPublisherDataRequest()
        {
            readFromValue(obj);
        }
		
		~FGetPublisherDataRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetPublisherDataResult : public FPlayFabBaseModel
    {
		
		// [optional] a dictionary object of key / value pairs
		TMap<FString, FString> Data;
	
        FGetPublisherDataResult() :
			FPlayFabBaseModel(),
			Data()
			{}
		
		FGetPublisherDataResult(const FGetPublisherDataResult& src) :
			FPlayFabBaseModel(),
			Data(src.Data)
			{}
			
		FGetPublisherDataResult(const TSharedPtr<FJsonObject>& obj) : FGetPublisherDataResult()
        {
            readFromValue(obj);
        }
		
		~FGetPublisherDataResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetSharedGroupDataRequest : public FPlayFabBaseModel
    {
		
		// [optional] Unique identifier for the shared group.
		FString SharedGroupId;
		// [optional] Specific keys to retrieve from the shared group (if not specified, all keys will be returned, while an empty array indicates that no keys should be returned).
		TArray<FString> Keys;
		// [optional] If true, return the list of all members of the shared group.
		OptionalBool GetMembers;
	
        FGetSharedGroupDataRequest() :
			FPlayFabBaseModel(),
			SharedGroupId(),
			Keys(),
			GetMembers()
			{}
		
		FGetSharedGroupDataRequest(const FGetSharedGroupDataRequest& src) :
			FPlayFabBaseModel(),
			SharedGroupId(src.SharedGroupId),
			Keys(src.Keys),
			GetMembers(src.GetMembers)
			{}
			
		FGetSharedGroupDataRequest(const TSharedPtr<FJsonObject>& obj) : FGetSharedGroupDataRequest()
        {
            readFromValue(obj);
        }
		
		~FGetSharedGroupDataRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FSharedGroupDataRecord : public FPlayFabBaseModel
    {
		
		// [optional] Data stored for the specified group data key.
		FString Value;
		// [optional] PlayFabId of the user to last update this value.
		FString LastUpdatedBy;
		// Timestamp for when this data was last updated.
		FDateTime LastUpdated;
		// [optional] Indicates whether this data can be read by all users (public) or only members of the group (private).
		Boxed<UserDataPermission> Permission;
	
        FSharedGroupDataRecord() :
			FPlayFabBaseModel(),
			Value(),
			LastUpdatedBy(),
			LastUpdated(0),
			Permission()
			{}
		
		FSharedGroupDataRecord(const FSharedGroupDataRecord& src) :
			FPlayFabBaseModel(),
			Value(src.Value),
			LastUpdatedBy(src.LastUpdatedBy),
			LastUpdated(src.LastUpdated),
			Permission(src.Permission)
			{}
			
		FSharedGroupDataRecord(const TSharedPtr<FJsonObject>& obj) : FSharedGroupDataRecord()
        {
            readFromValue(obj);
        }
		
		~FSharedGroupDataRecord();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetSharedGroupDataResult : public FPlayFabBaseModel
    {
		
		// [optional] Data for the requested keys.
		TMap<FString, FSharedGroupDataRecord> Data;
		// [optional] List of PlayFabId identifiers for the members of this group, if requested.
		TArray<FString> Members;
	
        FGetSharedGroupDataResult() :
			FPlayFabBaseModel(),
			Data(),
			Members()
			{}
		
		FGetSharedGroupDataResult(const FGetSharedGroupDataResult& src) :
			FPlayFabBaseModel(),
			Data(src.Data),
			Members(src.Members)
			{}
			
		FGetSharedGroupDataResult(const TSharedPtr<FJsonObject>& obj) : FGetSharedGroupDataResult()
        {
            readFromValue(obj);
        }
		
		~FGetSharedGroupDataResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetTitleDataRequest : public FPlayFabBaseModel
    {
		
		// [optional] Specific keys to search for in the title data (leave null to get all keys)
		TArray<FString> Keys;
	
        FGetTitleDataRequest() :
			FPlayFabBaseModel(),
			Keys()
			{}
		
		FGetTitleDataRequest(const FGetTitleDataRequest& src) :
			FPlayFabBaseModel(),
			Keys(src.Keys)
			{}
			
		FGetTitleDataRequest(const TSharedPtr<FJsonObject>& obj) : FGetTitleDataRequest()
        {
            readFromValue(obj);
        }
		
		~FGetTitleDataRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetTitleDataResult : public FPlayFabBaseModel
    {
		
		// [optional] a dictionary object of key / value pairs
		TMap<FString, FString> Data;
	
        FGetTitleDataResult() :
			FPlayFabBaseModel(),
			Data()
			{}
		
		FGetTitleDataResult(const FGetTitleDataResult& src) :
			FPlayFabBaseModel(),
			Data(src.Data)
			{}
			
		FGetTitleDataResult(const TSharedPtr<FJsonObject>& obj) : FGetTitleDataResult()
        {
            readFromValue(obj);
        }
		
		~FGetTitleDataResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetTitleNewsRequest : public FPlayFabBaseModel
    {
		
		// [optional] Limits the results to the last n entries. Defaults to 10 if not set.
		OptionalInt32 Count;
	
        FGetTitleNewsRequest() :
			FPlayFabBaseModel(),
			Count()
			{}
		
		FGetTitleNewsRequest(const FGetTitleNewsRequest& src) :
			FPlayFabBaseModel(),
			Count(src.Count)
			{}
			
		FGetTitleNewsRequest(const TSharedPtr<FJsonObject>& obj) : FGetTitleNewsRequest()
        {
            readFromValue(obj);
        }
		
		~FGetTitleNewsRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FTitleNewsItem : public FPlayFabBaseModel
    {
		
		// Date and time when the news items was posted.
		FDateTime Timestamp;
		// [optional] Unique identifier of news item.
		FString NewsId;
		// [optional] Title of the news item.
		FString Title;
		// [optional] News item text.
		FString Body;
	
        FTitleNewsItem() :
			FPlayFabBaseModel(),
			Timestamp(0),
			NewsId(),
			Title(),
			Body()
			{}
		
		FTitleNewsItem(const FTitleNewsItem& src) :
			FPlayFabBaseModel(),
			Timestamp(src.Timestamp),
			NewsId(src.NewsId),
			Title(src.Title),
			Body(src.Body)
			{}
			
		FTitleNewsItem(const TSharedPtr<FJsonObject>& obj) : FTitleNewsItem()
        {
            readFromValue(obj);
        }
		
		~FTitleNewsItem();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetTitleNewsResult : public FPlayFabBaseModel
    {
		
		// [optional] Array of news items.
		TArray<FTitleNewsItem> News;
	
        FGetTitleNewsResult() :
			FPlayFabBaseModel(),
			News()
			{}
		
		FGetTitleNewsResult(const FGetTitleNewsResult& src) :
			FPlayFabBaseModel(),
			News(src.News)
			{}
			
		FGetTitleNewsResult(const TSharedPtr<FJsonObject>& obj) : FGetTitleNewsResult()
        {
            readFromValue(obj);
        }
		
		~FGetTitleNewsResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetUserAccountInfoRequest : public FPlayFabBaseModel
    {
		
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
	
        FGetUserAccountInfoRequest() :
			FPlayFabBaseModel(),
			PlayFabId()
			{}
		
		FGetUserAccountInfoRequest(const FGetUserAccountInfoRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId)
			{}
			
		FGetUserAccountInfoRequest(const TSharedPtr<FJsonObject>& obj) : FGetUserAccountInfoRequest()
        {
            readFromValue(obj);
        }
		
		~FGetUserAccountInfoRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetUserAccountInfoResult : public FPlayFabBaseModel
    {
		
		// [optional] Account details for the user whose information was requested.
		TSharedPtr<FUserAccountInfo> UserInfo;
	
        FGetUserAccountInfoResult() :
			FPlayFabBaseModel(),
			UserInfo(nullptr)
			{}
		
		FGetUserAccountInfoResult(const FGetUserAccountInfoResult& src) :
			FPlayFabBaseModel(),
			UserInfo(src.UserInfo.IsValid() ? MakeShareable(new FUserAccountInfo(*src.UserInfo)) : nullptr)
			{}
			
		FGetUserAccountInfoResult(const TSharedPtr<FJsonObject>& obj) : FGetUserAccountInfoResult()
        {
            readFromValue(obj);
        }
		
		~FGetUserAccountInfoResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetUserDataRequest : public FPlayFabBaseModel
    {
		
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// [optional] Specific keys to search for in the custom user data.
		TArray<FString> Keys;
		// [optional] The version that currently exists according to the caller. The call will return the data for all of the keys if the version in the system is greater than this.
		OptionalInt32 IfChangedFromDataVersion;
	
        FGetUserDataRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			Keys(),
			IfChangedFromDataVersion()
			{}
		
		FGetUserDataRequest(const FGetUserDataRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			Keys(src.Keys),
			IfChangedFromDataVersion(src.IfChangedFromDataVersion)
			{}
			
		FGetUserDataRequest(const TSharedPtr<FJsonObject>& obj) : FGetUserDataRequest()
        {
            readFromValue(obj);
        }
		
		~FGetUserDataRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetUserDataResult : public FPlayFabBaseModel
    {
		
		// [optional] PlayFab unique identifier of the user whose custom data is being returned.
		FString PlayFabId;
		// Indicates the current version of the data that has been set. This is incremented with every set call for that type of data (read-only, internal, etc). This version can be provided in Get calls to find updated data.
		uint32 DataVersion;
		// [optional] User specific data for this title.
		TMap<FString, FUserDataRecord> Data;
	
        FGetUserDataResult() :
			FPlayFabBaseModel(),
			PlayFabId(),
			DataVersion(0),
			Data()
			{}
		
		FGetUserDataResult(const FGetUserDataResult& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			DataVersion(src.DataVersion),
			Data(src.Data)
			{}
			
		FGetUserDataResult(const TSharedPtr<FJsonObject>& obj) : FGetUserDataResult()
        {
            readFromValue(obj);
        }
		
		~FGetUserDataResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetUserInventoryRequest : public FPlayFabBaseModel
    {
		
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
	
        FGetUserInventoryRequest() :
			FPlayFabBaseModel(),
			PlayFabId()
			{}
		
		FGetUserInventoryRequest(const FGetUserInventoryRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId)
			{}
			
		FGetUserInventoryRequest(const TSharedPtr<FJsonObject>& obj) : FGetUserInventoryRequest()
        {
            readFromValue(obj);
        }
		
		~FGetUserInventoryRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetUserInventoryResult : public FPlayFabBaseModel
    {
		
		// [optional] PlayFab unique identifier of the user whose inventory is being returned.
		FString PlayFabId;
		// [optional] Array of inventory items belonging to the user.
		TArray<FItemInstance> Inventory;
		// [optional] Array of virtual currency balance(s) belonging to the user.
		TMap<FString, int32> VirtualCurrency;
		// [optional] Array of remaining times and timestamps for virtual currencies.
		TMap<FString, FVirtualCurrencyRechargeTime> VirtualCurrencyRechargeTimes;
	
        FGetUserInventoryResult() :
			FPlayFabBaseModel(),
			PlayFabId(),
			Inventory(),
			VirtualCurrency(),
			VirtualCurrencyRechargeTimes()
			{}
		
		FGetUserInventoryResult(const FGetUserInventoryResult& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			Inventory(src.Inventory),
			VirtualCurrency(src.VirtualCurrency),
			VirtualCurrencyRechargeTimes(src.VirtualCurrencyRechargeTimes)
			{}
			
		FGetUserInventoryResult(const TSharedPtr<FJsonObject>& obj) : FGetUserInventoryResult()
        {
            readFromValue(obj);
        }
		
		~FGetUserInventoryResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetUserStatisticsRequest : public FPlayFabBaseModel
    {
		
		// User for whom statistics are being requested.
		FString PlayFabId;
	
        FGetUserStatisticsRequest() :
			FPlayFabBaseModel(),
			PlayFabId()
			{}
		
		FGetUserStatisticsRequest(const FGetUserStatisticsRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId)
			{}
			
		FGetUserStatisticsRequest(const TSharedPtr<FJsonObject>& obj) : FGetUserStatisticsRequest()
        {
            readFromValue(obj);
        }
		
		~FGetUserStatisticsRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGetUserStatisticsResult : public FPlayFabBaseModel
    {
		
		// [optional] PlayFab unique identifier of the user whose statistics are being returned.
		FString PlayFabId;
		// [optional] User statistics for the requested user.
		TMap<FString, int32> UserStatistics;
	
        FGetUserStatisticsResult() :
			FPlayFabBaseModel(),
			PlayFabId(),
			UserStatistics()
			{}
		
		FGetUserStatisticsResult(const FGetUserStatisticsResult& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			UserStatistics(src.UserStatistics)
			{}
			
		FGetUserStatisticsResult(const TSharedPtr<FJsonObject>& obj) : FGetUserStatisticsResult()
        {
            readFromValue(obj);
        }
		
		~FGetUserStatisticsResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGrantCharacterToUserRequest : public FPlayFabBaseModel
    {
		
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// Non-unique display name of the character being granted.
		FString CharacterName;
		// Type of the character being granted; statistics can be sliced based on this value.
		FString CharacterType;
	
        FGrantCharacterToUserRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			CharacterName(),
			CharacterType()
			{}
		
		FGrantCharacterToUserRequest(const FGrantCharacterToUserRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			CharacterName(src.CharacterName),
			CharacterType(src.CharacterType)
			{}
			
		FGrantCharacterToUserRequest(const TSharedPtr<FJsonObject>& obj) : FGrantCharacterToUserRequest()
        {
            readFromValue(obj);
        }
		
		~FGrantCharacterToUserRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGrantCharacterToUserResult : public FPlayFabBaseModel
    {
		
		// [optional] Unique identifier tagged to this character.
		FString CharacterId;
	
        FGrantCharacterToUserResult() :
			FPlayFabBaseModel(),
			CharacterId()
			{}
		
		FGrantCharacterToUserResult(const FGrantCharacterToUserResult& src) :
			FPlayFabBaseModel(),
			CharacterId(src.CharacterId)
			{}
			
		FGrantCharacterToUserResult(const TSharedPtr<FJsonObject>& obj) : FGrantCharacterToUserResult()
        {
            readFromValue(obj);
        }
		
		~FGrantCharacterToUserResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGrantedItemInstance : public FPlayFabBaseModel
    {
		
		// [optional] Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// [optional] Unique PlayFab assigned ID for a specific character owned by a user
		FString CharacterId;
		// Result of this operation.
		bool Result;
		// [optional] Unique identifier for the inventory item, as defined in the catalog.
		FString ItemId;
		// [optional] Unique item identifier for this specific instance of the item.
		FString ItemInstanceId;
		// [optional] Class name for the inventory item, as defined in the catalog.
		FString ItemClass;
		// [optional] Timestamp for when this instance was purchased.
		OptionalTime PurchaseDate;
		// [optional] Timestamp for when this instance will expire.
		OptionalTime Expiration;
		// [optional] Total number of remaining uses, if this is a consumable item.
		OptionalInt32 RemainingUses;
		// [optional] The number of uses that were added or removed to this item in this call.
		OptionalInt32 UsesIncrementedBy;
		// [optional] Game specific comment associated with this instance when it was added to the user inventory.
		FString Annotation;
		// [optional] Catalog version for the inventory item, when this instance was created.
		FString CatalogVersion;
		// [optional] Unique identifier for the parent inventory item, as defined in the catalog, for object which were added from a bundle or container.
		FString BundleParent;
		// [optional] CatalogItem.DisplayName at the time this item was purchased.
		FString DisplayName;
		// [optional] Currency type for the cost of the catalog item.
		FString UnitCurrency;
		// Cost of the catalog item in the given currency.
		uint32 UnitPrice;
		// [optional] Array of unique items that were awarded when this catalog item was purchased.
		TArray<FString> BundleContents;
		// [optional] A set of custom key-value pairs on the inventory item.
		TMap<FString, FString> CustomData;
	
        FGrantedItemInstance() :
			FPlayFabBaseModel(),
			PlayFabId(),
			CharacterId(),
			Result(false),
			ItemId(),
			ItemInstanceId(),
			ItemClass(),
			PurchaseDate(),
			Expiration(),
			RemainingUses(),
			UsesIncrementedBy(),
			Annotation(),
			CatalogVersion(),
			BundleParent(),
			DisplayName(),
			UnitCurrency(),
			UnitPrice(0),
			BundleContents(),
			CustomData()
			{}
		
		FGrantedItemInstance(const FGrantedItemInstance& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			CharacterId(src.CharacterId),
			Result(src.Result),
			ItemId(src.ItemId),
			ItemInstanceId(src.ItemInstanceId),
			ItemClass(src.ItemClass),
			PurchaseDate(src.PurchaseDate),
			Expiration(src.Expiration),
			RemainingUses(src.RemainingUses),
			UsesIncrementedBy(src.UsesIncrementedBy),
			Annotation(src.Annotation),
			CatalogVersion(src.CatalogVersion),
			BundleParent(src.BundleParent),
			DisplayName(src.DisplayName),
			UnitCurrency(src.UnitCurrency),
			UnitPrice(src.UnitPrice),
			BundleContents(src.BundleContents),
			CustomData(src.CustomData)
			{}
			
		FGrantedItemInstance(const TSharedPtr<FJsonObject>& obj) : FGrantedItemInstance()
        {
            readFromValue(obj);
        }
		
		~FGrantedItemInstance();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGrantItemsToCharacterRequest : public FPlayFabBaseModel
    {
		
		// [optional] Catalog version from which items are to be granted.
		FString CatalogVersion;
		// Unique PlayFab assigned ID for a specific character owned by a user
		FString CharacterId;
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// [optional] String detailing any additional information concerning this operation.
		FString Annotation;
		// [optional] Array of itemIds to grant to the user.
		TArray<FString> ItemIds;
	
        FGrantItemsToCharacterRequest() :
			FPlayFabBaseModel(),
			CatalogVersion(),
			CharacterId(),
			PlayFabId(),
			Annotation(),
			ItemIds()
			{}
		
		FGrantItemsToCharacterRequest(const FGrantItemsToCharacterRequest& src) :
			FPlayFabBaseModel(),
			CatalogVersion(src.CatalogVersion),
			CharacterId(src.CharacterId),
			PlayFabId(src.PlayFabId),
			Annotation(src.Annotation),
			ItemIds(src.ItemIds)
			{}
			
		FGrantItemsToCharacterRequest(const TSharedPtr<FJsonObject>& obj) : FGrantItemsToCharacterRequest()
        {
            readFromValue(obj);
        }
		
		~FGrantItemsToCharacterRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGrantItemsToCharacterResult : public FPlayFabBaseModel
    {
		
		// [optional] Array of items granted to users.
		TArray<FGrantedItemInstance> ItemGrantResults;
	
        FGrantItemsToCharacterResult() :
			FPlayFabBaseModel(),
			ItemGrantResults()
			{}
		
		FGrantItemsToCharacterResult(const FGrantItemsToCharacterResult& src) :
			FPlayFabBaseModel(),
			ItemGrantResults(src.ItemGrantResults)
			{}
			
		FGrantItemsToCharacterResult(const TSharedPtr<FJsonObject>& obj) : FGrantItemsToCharacterResult()
        {
            readFromValue(obj);
        }
		
		~FGrantItemsToCharacterResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGrantItemsToUserRequest : public FPlayFabBaseModel
    {
		
		// [optional] Catalog version from which items are to be granted.
		FString CatalogVersion;
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// [optional] String detailing any additional information concerning this operation.
		FString Annotation;
		// Array of itemIds to grant to the user.
		TArray<FString> ItemIds;
	
        FGrantItemsToUserRequest() :
			FPlayFabBaseModel(),
			CatalogVersion(),
			PlayFabId(),
			Annotation(),
			ItemIds()
			{}
		
		FGrantItemsToUserRequest(const FGrantItemsToUserRequest& src) :
			FPlayFabBaseModel(),
			CatalogVersion(src.CatalogVersion),
			PlayFabId(src.PlayFabId),
			Annotation(src.Annotation),
			ItemIds(src.ItemIds)
			{}
			
		FGrantItemsToUserRequest(const TSharedPtr<FJsonObject>& obj) : FGrantItemsToUserRequest()
        {
            readFromValue(obj);
        }
		
		~FGrantItemsToUserRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGrantItemsToUserResult : public FPlayFabBaseModel
    {
		
		// [optional] Array of items granted to users.
		TArray<FGrantedItemInstance> ItemGrantResults;
	
        FGrantItemsToUserResult() :
			FPlayFabBaseModel(),
			ItemGrantResults()
			{}
		
		FGrantItemsToUserResult(const FGrantItemsToUserResult& src) :
			FPlayFabBaseModel(),
			ItemGrantResults(src.ItemGrantResults)
			{}
			
		FGrantItemsToUserResult(const TSharedPtr<FJsonObject>& obj) : FGrantItemsToUserResult()
        {
            readFromValue(obj);
        }
		
		~FGrantItemsToUserResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FItemGrant : public FPlayFabBaseModel
    {
		
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// Unique identifier of the catalog item to be granted to the user.
		FString ItemId;
		// [optional] String detailing any additional information concerning this operation.
		FString Annotation;
		// [optional] Unique PlayFab assigned ID for a specific character owned by a user
		FString CharacterId;
	
        FItemGrant() :
			FPlayFabBaseModel(),
			PlayFabId(),
			ItemId(),
			Annotation(),
			CharacterId()
			{}
		
		FItemGrant(const FItemGrant& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			ItemId(src.ItemId),
			Annotation(src.Annotation),
			CharacterId(src.CharacterId)
			{}
			
		FItemGrant(const TSharedPtr<FJsonObject>& obj) : FItemGrant()
        {
            readFromValue(obj);
        }
		
		~FItemGrant();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGrantItemsToUsersRequest : public FPlayFabBaseModel
    {
		
		// [optional] Catalog version from which items are to be granted.
		FString CatalogVersion;
		// Array of items to grant and the users to whom the items are to be granted.
		TArray<FItemGrant> ItemGrants;
	
        FGrantItemsToUsersRequest() :
			FPlayFabBaseModel(),
			CatalogVersion(),
			ItemGrants()
			{}
		
		FGrantItemsToUsersRequest(const FGrantItemsToUsersRequest& src) :
			FPlayFabBaseModel(),
			CatalogVersion(src.CatalogVersion),
			ItemGrants(src.ItemGrants)
			{}
			
		FGrantItemsToUsersRequest(const TSharedPtr<FJsonObject>& obj) : FGrantItemsToUsersRequest()
        {
            readFromValue(obj);
        }
		
		~FGrantItemsToUsersRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FGrantItemsToUsersResult : public FPlayFabBaseModel
    {
		
		// [optional] Array of items granted to users.
		TArray<FGrantedItemInstance> ItemGrantResults;
	
        FGrantItemsToUsersResult() :
			FPlayFabBaseModel(),
			ItemGrantResults()
			{}
		
		FGrantItemsToUsersResult(const FGrantItemsToUsersResult& src) :
			FPlayFabBaseModel(),
			ItemGrantResults(src.ItemGrantResults)
			{}
			
		FGrantItemsToUsersResult(const TSharedPtr<FJsonObject>& obj) : FGrantItemsToUsersResult()
        {
            readFromValue(obj);
        }
		
		~FGrantItemsToUsersResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FListUsersCharactersRequest : public FPlayFabBaseModel
    {
		
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
	
        FListUsersCharactersRequest() :
			FPlayFabBaseModel(),
			PlayFabId()
			{}
		
		FListUsersCharactersRequest(const FListUsersCharactersRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId)
			{}
			
		FListUsersCharactersRequest(const TSharedPtr<FJsonObject>& obj) : FListUsersCharactersRequest()
        {
            readFromValue(obj);
        }
		
		~FListUsersCharactersRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FListUsersCharactersResult : public FPlayFabBaseModel
    {
		
		// [optional] The requested list of characters.
		TArray<FCharacterResult> Characters;
	
        FListUsersCharactersResult() :
			FPlayFabBaseModel(),
			Characters()
			{}
		
		FListUsersCharactersResult(const FListUsersCharactersResult& src) :
			FPlayFabBaseModel(),
			Characters(src.Characters)
			{}
			
		FListUsersCharactersResult(const TSharedPtr<FJsonObject>& obj) : FListUsersCharactersResult()
        {
            readFromValue(obj);
        }
		
		~FListUsersCharactersResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FLogEventRequest : public FPlayFabBaseModel
    {
		
		// [optional] PlayFab User Id of the player associated with this event. For non-player associated events, this must be null and EntityId must be set.
		FString PlayFabId;
		// [optional] For non player-associated events, a unique ID for the entity associated with this event. For player associated events, this must be null and PlayFabId must be set.
		FString EntityId;
		// [optional] For non player-associated events, the type of entity associated with this event. For player associated events, this must be null.
		FString EntityType;
		// [optional] Optional timestamp for this event. If null, the a timestamp is auto-assigned to the event on the server.
		OptionalTime Timestamp;
		// [optional] A unique event name which will be used as the table name in the Redshift database. The name will be made lower case, and cannot not contain spaces. The use of underscores is recommended, for readability. Events also cannot match reserved terms. The PlayFab reserved terms are 'log_in' and 'purchase', 'create' and 'request', while the Redshift reserved terms can be found here: http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html.
		FString EventName;
		// [optional] Contains all the data for this event. Event Values can be strings, booleans or numerics (float, double, integer, long) and must be consistent on a per-event basis (if the Value for Key 'A' in Event 'Foo' is an integer the first time it is sent, it must be an integer in all subsequent 'Foo' events). As with event names, Keys must also not use reserved words (see above). Finally, the size of the Body for an event must be less than 32KB (UTF-8 format).
		TMap<FString, FMultitypeVar> Body;
		// Flag to set event Body as profile details in the Redshift database as well as a standard event.
		bool ProfileSetEvent;
	
        FLogEventRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			EntityId(),
			EntityType(),
			Timestamp(),
			EventName(),
			Body(),
			ProfileSetEvent(false)
			{}
		
		FLogEventRequest(const FLogEventRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			EntityId(src.EntityId),
			EntityType(src.EntityType),
			Timestamp(src.Timestamp),
			EventName(src.EventName),
			Body(src.Body),
			ProfileSetEvent(src.ProfileSetEvent)
			{}
			
		FLogEventRequest(const TSharedPtr<FJsonObject>& obj) : FLogEventRequest()
        {
            readFromValue(obj);
        }
		
		~FLogEventRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FLogEventResult : public FPlayFabBaseModel
    {
		
	
        FLogEventResult() :
			FPlayFabBaseModel()
			{}
		
		FLogEventResult(const FLogEventResult& src) :
			FPlayFabBaseModel()
			{}
			
		FLogEventResult(const TSharedPtr<FJsonObject>& obj) : FLogEventResult()
        {
            readFromValue(obj);
        }
		
		~FLogEventResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FModifyCharacterVirtualCurrencyResult : public FPlayFabBaseModel
    {
		
		// [optional] Name of the virtual currency which was modified.
		FString VirtualCurrency;
		// Balance of the virtual currency after modification.
		int32 Balance;
	
        FModifyCharacterVirtualCurrencyResult() :
			FPlayFabBaseModel(),
			VirtualCurrency(),
			Balance(0)
			{}
		
		FModifyCharacterVirtualCurrencyResult(const FModifyCharacterVirtualCurrencyResult& src) :
			FPlayFabBaseModel(),
			VirtualCurrency(src.VirtualCurrency),
			Balance(src.Balance)
			{}
			
		FModifyCharacterVirtualCurrencyResult(const TSharedPtr<FJsonObject>& obj) : FModifyCharacterVirtualCurrencyResult()
        {
            readFromValue(obj);
        }
		
		~FModifyCharacterVirtualCurrencyResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FModifyItemUsesRequest : public FPlayFabBaseModel
    {
		
		// PlayFab unique identifier of the user whose item is being modified.
		FString PlayFabId;
		// Unique instance identifier of the item to be modified.
		FString ItemInstanceId;
		// Number of uses to add to the item. Can be negative to remove uses.
		int32 UsesToAdd;
	
        FModifyItemUsesRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			ItemInstanceId(),
			UsesToAdd(0)
			{}
		
		FModifyItemUsesRequest(const FModifyItemUsesRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			ItemInstanceId(src.ItemInstanceId),
			UsesToAdd(src.UsesToAdd)
			{}
			
		FModifyItemUsesRequest(const TSharedPtr<FJsonObject>& obj) : FModifyItemUsesRequest()
        {
            readFromValue(obj);
        }
		
		~FModifyItemUsesRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FModifyItemUsesResult : public FPlayFabBaseModel
    {
		
		// [optional] Unique instance identifier of the item with uses consumed.
		FString ItemInstanceId;
		// Number of uses remaining on the item.
		int32 RemainingUses;
	
        FModifyItemUsesResult() :
			FPlayFabBaseModel(),
			ItemInstanceId(),
			RemainingUses(0)
			{}
		
		FModifyItemUsesResult(const FModifyItemUsesResult& src) :
			FPlayFabBaseModel(),
			ItemInstanceId(src.ItemInstanceId),
			RemainingUses(src.RemainingUses)
			{}
			
		FModifyItemUsesResult(const TSharedPtr<FJsonObject>& obj) : FModifyItemUsesResult()
        {
            readFromValue(obj);
        }
		
		~FModifyItemUsesResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FModifyUserVirtualCurrencyResult : public FPlayFabBaseModel
    {
		
		// [optional] User currency was subtracted from.
		FString PlayFabId;
		// [optional] Name of the virtual currency which was modified.
		FString VirtualCurrency;
		// Amount added or subtracted from the user's virtual currency. Maximum VC balance is Int32 (2,147,483,647). Any increase over this value will be discarded.
		int32 BalanceChange;
		// Balance of the virtual currency after modification.
		int32 Balance;
	
        FModifyUserVirtualCurrencyResult() :
			FPlayFabBaseModel(),
			PlayFabId(),
			VirtualCurrency(),
			BalanceChange(0),
			Balance(0)
			{}
		
		FModifyUserVirtualCurrencyResult(const FModifyUserVirtualCurrencyResult& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			VirtualCurrency(src.VirtualCurrency),
			BalanceChange(src.BalanceChange),
			Balance(src.Balance)
			{}
			
		FModifyUserVirtualCurrencyResult(const TSharedPtr<FJsonObject>& obj) : FModifyUserVirtualCurrencyResult()
        {
            readFromValue(obj);
        }
		
		~FModifyUserVirtualCurrencyResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FMoveItemToCharacterFromCharacterRequest : public FPlayFabBaseModel
    {
		
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// Unique identifier of the character that currently has the item.
		FString GivingCharacterId;
		// Unique identifier of the character that will be receiving the item.
		FString ReceivingCharacterId;
		// Unique PlayFab assigned instance identifier of the item
		FString ItemInstanceId;
	
        FMoveItemToCharacterFromCharacterRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			GivingCharacterId(),
			ReceivingCharacterId(),
			ItemInstanceId()
			{}
		
		FMoveItemToCharacterFromCharacterRequest(const FMoveItemToCharacterFromCharacterRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			GivingCharacterId(src.GivingCharacterId),
			ReceivingCharacterId(src.ReceivingCharacterId),
			ItemInstanceId(src.ItemInstanceId)
			{}
			
		FMoveItemToCharacterFromCharacterRequest(const TSharedPtr<FJsonObject>& obj) : FMoveItemToCharacterFromCharacterRequest()
        {
            readFromValue(obj);
        }
		
		~FMoveItemToCharacterFromCharacterRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FMoveItemToCharacterFromCharacterResult : public FPlayFabBaseModel
    {
		
	
        FMoveItemToCharacterFromCharacterResult() :
			FPlayFabBaseModel()
			{}
		
		FMoveItemToCharacterFromCharacterResult(const FMoveItemToCharacterFromCharacterResult& src) :
			FPlayFabBaseModel()
			{}
			
		FMoveItemToCharacterFromCharacterResult(const TSharedPtr<FJsonObject>& obj) : FMoveItemToCharacterFromCharacterResult()
        {
            readFromValue(obj);
        }
		
		~FMoveItemToCharacterFromCharacterResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FMoveItemToCharacterFromUserRequest : public FPlayFabBaseModel
    {
		
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// Unique PlayFab assigned ID for a specific character owned by a user
		FString CharacterId;
		// Unique PlayFab assigned instance identifier of the item
		FString ItemInstanceId;
	
        FMoveItemToCharacterFromUserRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			CharacterId(),
			ItemInstanceId()
			{}
		
		FMoveItemToCharacterFromUserRequest(const FMoveItemToCharacterFromUserRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			CharacterId(src.CharacterId),
			ItemInstanceId(src.ItemInstanceId)
			{}
			
		FMoveItemToCharacterFromUserRequest(const TSharedPtr<FJsonObject>& obj) : FMoveItemToCharacterFromUserRequest()
        {
            readFromValue(obj);
        }
		
		~FMoveItemToCharacterFromUserRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FMoveItemToCharacterFromUserResult : public FPlayFabBaseModel
    {
		
	
        FMoveItemToCharacterFromUserResult() :
			FPlayFabBaseModel()
			{}
		
		FMoveItemToCharacterFromUserResult(const FMoveItemToCharacterFromUserResult& src) :
			FPlayFabBaseModel()
			{}
			
		FMoveItemToCharacterFromUserResult(const TSharedPtr<FJsonObject>& obj) : FMoveItemToCharacterFromUserResult()
        {
            readFromValue(obj);
        }
		
		~FMoveItemToCharacterFromUserResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FMoveItemToUserFromCharacterRequest : public FPlayFabBaseModel
    {
		
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// Unique PlayFab assigned ID for a specific character owned by a user
		FString CharacterId;
		// Unique PlayFab assigned instance identifier of the item
		FString ItemInstanceId;
	
        FMoveItemToUserFromCharacterRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			CharacterId(),
			ItemInstanceId()
			{}
		
		FMoveItemToUserFromCharacterRequest(const FMoveItemToUserFromCharacterRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			CharacterId(src.CharacterId),
			ItemInstanceId(src.ItemInstanceId)
			{}
			
		FMoveItemToUserFromCharacterRequest(const TSharedPtr<FJsonObject>& obj) : FMoveItemToUserFromCharacterRequest()
        {
            readFromValue(obj);
        }
		
		~FMoveItemToUserFromCharacterRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FMoveItemToUserFromCharacterResult : public FPlayFabBaseModel
    {
		
	
        FMoveItemToUserFromCharacterResult() :
			FPlayFabBaseModel()
			{}
		
		FMoveItemToUserFromCharacterResult(const FMoveItemToUserFromCharacterResult& src) :
			FPlayFabBaseModel()
			{}
			
		FMoveItemToUserFromCharacterResult(const TSharedPtr<FJsonObject>& obj) : FMoveItemToUserFromCharacterResult()
        {
            readFromValue(obj);
        }
		
		~FMoveItemToUserFromCharacterResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FNotifyMatchmakerPlayerLeftRequest : public FPlayFabBaseModel
    {
		
		// Unique identifier of the Game Instance the user is leaving.
		FString LobbyId;
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
	
        FNotifyMatchmakerPlayerLeftRequest() :
			FPlayFabBaseModel(),
			LobbyId(),
			PlayFabId()
			{}
		
		FNotifyMatchmakerPlayerLeftRequest(const FNotifyMatchmakerPlayerLeftRequest& src) :
			FPlayFabBaseModel(),
			LobbyId(src.LobbyId),
			PlayFabId(src.PlayFabId)
			{}
			
		FNotifyMatchmakerPlayerLeftRequest(const TSharedPtr<FJsonObject>& obj) : FNotifyMatchmakerPlayerLeftRequest()
        {
            readFromValue(obj);
        }
		
		~FNotifyMatchmakerPlayerLeftRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	enum PlayerConnectionState
	{
		PlayerConnectionStateUnassigned,
		PlayerConnectionStateConnecting,
		PlayerConnectionStateParticipating,
		PlayerConnectionStateParticipated,
		PlayerConnectionStateReconnecting
	};
	
	void writePlayerConnectionStateEnumJSON(PlayerConnectionState enumVal, JsonWriter& writer);
	PlayerConnectionState readPlayerConnectionStateFromValue(const TSharedPtr<FJsonValue>& value);
	
	
	struct PLAYFAB_API FNotifyMatchmakerPlayerLeftResult : public FPlayFabBaseModel
    {
		
		// [optional] State of user leaving the Game Server Instance.
		Boxed<PlayerConnectionState> PlayerState;
	
        FNotifyMatchmakerPlayerLeftResult() :
			FPlayFabBaseModel(),
			PlayerState()
			{}
		
		FNotifyMatchmakerPlayerLeftResult(const FNotifyMatchmakerPlayerLeftResult& src) :
			FPlayFabBaseModel(),
			PlayerState(src.PlayerState)
			{}
			
		FNotifyMatchmakerPlayerLeftResult(const TSharedPtr<FJsonObject>& obj) : FNotifyMatchmakerPlayerLeftResult()
        {
            readFromValue(obj);
        }
		
		~FNotifyMatchmakerPlayerLeftResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FRedeemCouponRequest : public FPlayFabBaseModel
    {
		
		// Generated coupon code to redeem.
		FString CouponCode;
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// [optional] Catalog version of the coupon.
		FString CatalogVersion;
	
        FRedeemCouponRequest() :
			FPlayFabBaseModel(),
			CouponCode(),
			PlayFabId(),
			CatalogVersion()
			{}
		
		FRedeemCouponRequest(const FRedeemCouponRequest& src) :
			FPlayFabBaseModel(),
			CouponCode(src.CouponCode),
			PlayFabId(src.PlayFabId),
			CatalogVersion(src.CatalogVersion)
			{}
			
		FRedeemCouponRequest(const TSharedPtr<FJsonObject>& obj) : FRedeemCouponRequest()
        {
            readFromValue(obj);
        }
		
		~FRedeemCouponRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FRedeemCouponResult : public FPlayFabBaseModel
    {
		
		// [optional] Items granted to the player as a result of redeeming the coupon.
		TArray<FItemInstance> GrantedItems;
	
        FRedeemCouponResult() :
			FPlayFabBaseModel(),
			GrantedItems()
			{}
		
		FRedeemCouponResult(const FRedeemCouponResult& src) :
			FPlayFabBaseModel(),
			GrantedItems(src.GrantedItems)
			{}
			
		FRedeemCouponResult(const TSharedPtr<FJsonObject>& obj) : FRedeemCouponResult()
        {
            readFromValue(obj);
        }
		
		~FRedeemCouponResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FRedeemMatchmakerTicketRequest : public FPlayFabBaseModel
    {
		
		// Server authorization ticket passed back from a call to Matchmake or StartGame.
		FString Ticket;
		// Unique identifier of the Game Server Instance that is asking for validation of the authorization ticket.
		FString LobbyId;
	
        FRedeemMatchmakerTicketRequest() :
			FPlayFabBaseModel(),
			Ticket(),
			LobbyId()
			{}
		
		FRedeemMatchmakerTicketRequest(const FRedeemMatchmakerTicketRequest& src) :
			FPlayFabBaseModel(),
			Ticket(src.Ticket),
			LobbyId(src.LobbyId)
			{}
			
		FRedeemMatchmakerTicketRequest(const TSharedPtr<FJsonObject>& obj) : FRedeemMatchmakerTicketRequest()
        {
            readFromValue(obj);
        }
		
		~FRedeemMatchmakerTicketRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FRedeemMatchmakerTicketResult : public FPlayFabBaseModel
    {
		
		// Boolean indicating whether the ticket was validated by the PlayFab service.
		bool TicketIsValid;
		// [optional] Error value if the ticket was not validated.
		FString Error;
		// [optional] User account information for the user validated.
		TSharedPtr<FUserAccountInfo> UserInfo;
	
        FRedeemMatchmakerTicketResult() :
			FPlayFabBaseModel(),
			TicketIsValid(false),
			Error(),
			UserInfo(nullptr)
			{}
		
		FRedeemMatchmakerTicketResult(const FRedeemMatchmakerTicketResult& src) :
			FPlayFabBaseModel(),
			TicketIsValid(src.TicketIsValid),
			Error(src.Error),
			UserInfo(src.UserInfo.IsValid() ? MakeShareable(new FUserAccountInfo(*src.UserInfo)) : nullptr)
			{}
			
		FRedeemMatchmakerTicketResult(const TSharedPtr<FJsonObject>& obj) : FRedeemMatchmakerTicketResult()
        {
            readFromValue(obj);
        }
		
		~FRedeemMatchmakerTicketResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FRemoveSharedGroupMembersRequest : public FPlayFabBaseModel
    {
		
		// Unique identifier for the shared group.
		FString SharedGroupId;
		// [optional] An array of unique PlayFab assigned ID of the user on whom the operation will be performed.
		TArray<FString> PlayFabIds;
	
        FRemoveSharedGroupMembersRequest() :
			FPlayFabBaseModel(),
			SharedGroupId(),
			PlayFabIds()
			{}
		
		FRemoveSharedGroupMembersRequest(const FRemoveSharedGroupMembersRequest& src) :
			FPlayFabBaseModel(),
			SharedGroupId(src.SharedGroupId),
			PlayFabIds(src.PlayFabIds)
			{}
			
		FRemoveSharedGroupMembersRequest(const TSharedPtr<FJsonObject>& obj) : FRemoveSharedGroupMembersRequest()
        {
            readFromValue(obj);
        }
		
		~FRemoveSharedGroupMembersRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FRemoveSharedGroupMembersResult : public FPlayFabBaseModel
    {
		
	
        FRemoveSharedGroupMembersResult() :
			FPlayFabBaseModel()
			{}
		
		FRemoveSharedGroupMembersResult(const FRemoveSharedGroupMembersResult& src) :
			FPlayFabBaseModel()
			{}
			
		FRemoveSharedGroupMembersResult(const TSharedPtr<FJsonObject>& obj) : FRemoveSharedGroupMembersResult()
        {
            readFromValue(obj);
        }
		
		~FRemoveSharedGroupMembersResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FReportPlayerServerRequest : public FPlayFabBaseModel
    {
		
		// PlayFabId of the reporting player.
		FString ReporterId;
		// PlayFabId of the reported player.
		FString ReporteeId;
		// [optional] Title player was reported in, optional if report not for specific title.
		FString TitleId;
		// [optional] Optional additional comment by reporting player.
		FString Comment;
	
        FReportPlayerServerRequest() :
			FPlayFabBaseModel(),
			ReporterId(),
			ReporteeId(),
			TitleId(),
			Comment()
			{}
		
		FReportPlayerServerRequest(const FReportPlayerServerRequest& src) :
			FPlayFabBaseModel(),
			ReporterId(src.ReporterId),
			ReporteeId(src.ReporteeId),
			TitleId(src.TitleId),
			Comment(src.Comment)
			{}
			
		FReportPlayerServerRequest(const TSharedPtr<FJsonObject>& obj) : FReportPlayerServerRequest()
        {
            readFromValue(obj);
        }
		
		~FReportPlayerServerRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FReportPlayerServerResult : public FPlayFabBaseModel
    {
		
		// Indicates whether this action completed successfully.
		bool Updated;
		// The number of remaining reports which may be filed today by this reporting player.
		int32 SubmissionsRemaining;
	
        FReportPlayerServerResult() :
			FPlayFabBaseModel(),
			Updated(false),
			SubmissionsRemaining(0)
			{}
		
		FReportPlayerServerResult(const FReportPlayerServerResult& src) :
			FPlayFabBaseModel(),
			Updated(src.Updated),
			SubmissionsRemaining(src.SubmissionsRemaining)
			{}
			
		FReportPlayerServerResult(const TSharedPtr<FJsonObject>& obj) : FReportPlayerServerResult()
        {
            readFromValue(obj);
        }
		
		~FReportPlayerServerResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FRevokeInventoryItemRequest : public FPlayFabBaseModel
    {
		
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// [optional] Unique PlayFab assigned ID for a specific character owned by a user
		FString CharacterId;
		// Unique PlayFab assigned instance identifier of the item
		FString ItemInstanceId;
	
        FRevokeInventoryItemRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			CharacterId(),
			ItemInstanceId()
			{}
		
		FRevokeInventoryItemRequest(const FRevokeInventoryItemRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			CharacterId(src.CharacterId),
			ItemInstanceId(src.ItemInstanceId)
			{}
			
		FRevokeInventoryItemRequest(const TSharedPtr<FJsonObject>& obj) : FRevokeInventoryItemRequest()
        {
            readFromValue(obj);
        }
		
		~FRevokeInventoryItemRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FRevokeInventoryResult : public FPlayFabBaseModel
    {
		
	
        FRevokeInventoryResult() :
			FPlayFabBaseModel()
			{}
		
		FRevokeInventoryResult(const FRevokeInventoryResult& src) :
			FPlayFabBaseModel()
			{}
			
		FRevokeInventoryResult(const TSharedPtr<FJsonObject>& obj) : FRevokeInventoryResult()
        {
            readFromValue(obj);
        }
		
		~FRevokeInventoryResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FRunCloudScriptResult : public FPlayFabBaseModel
    {
		
		// [optional] id of Cloud Script run
		FString ActionId;
		// version of Cloud Script run
		int32 Version;
		// revision of Cloud Script run
		int32 Revision;
		// [optional] return values from the server action as a dynamic object
		FMultitypeVar Results;
		// [optional] return values from the server action as a JSON encoded string
		FString ResultsEncoded;
		// [optional] any log statements generated during the run of this action
		FString ActionLog;
		// time this script took to run, in seconds
		double ExecutionTime;
	
        FRunCloudScriptResult() :
			FPlayFabBaseModel(),
			ActionId(),
			Version(0),
			Revision(0),
			Results(),
			ResultsEncoded(),
			ActionLog(),
			ExecutionTime(0)
			{}
		
		FRunCloudScriptResult(const FRunCloudScriptResult& src) :
			FPlayFabBaseModel(),
			ActionId(src.ActionId),
			Version(src.Version),
			Revision(src.Revision),
			Results(src.Results),
			ResultsEncoded(src.ResultsEncoded),
			ActionLog(src.ActionLog),
			ExecutionTime(src.ExecutionTime)
			{}
			
		FRunCloudScriptResult(const TSharedPtr<FJsonObject>& obj) : FRunCloudScriptResult()
        {
            readFromValue(obj);
        }
		
		~FRunCloudScriptResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FSendPushNotificationRequest : public FPlayFabBaseModel
    {
		
		// PlayFabId of the recipient of the push notification.
		FString Recipient;
		// Text of message to send.
		FString Message;
		// [optional] Subject of message to send (may not be displayed in all platforms.
		FString Subject;
	
        FSendPushNotificationRequest() :
			FPlayFabBaseModel(),
			Recipient(),
			Message(),
			Subject()
			{}
		
		FSendPushNotificationRequest(const FSendPushNotificationRequest& src) :
			FPlayFabBaseModel(),
			Recipient(src.Recipient),
			Message(src.Message),
			Subject(src.Subject)
			{}
			
		FSendPushNotificationRequest(const TSharedPtr<FJsonObject>& obj) : FSendPushNotificationRequest()
        {
            readFromValue(obj);
        }
		
		~FSendPushNotificationRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FSendPushNotificationResult : public FPlayFabBaseModel
    {
		
	
        FSendPushNotificationResult() :
			FPlayFabBaseModel()
			{}
		
		FSendPushNotificationResult(const FSendPushNotificationResult& src) :
			FPlayFabBaseModel()
			{}
			
		FSendPushNotificationResult(const TSharedPtr<FJsonObject>& obj) : FSendPushNotificationResult()
        {
            readFromValue(obj);
        }
		
		~FSendPushNotificationResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FSetPublisherDataRequest : public FPlayFabBaseModel
    {
		
		// key we want to set a value on (note, this is additive - will only replace an existing key's value if they are the same name.) Keys are trimmed of whitespace. Keys may not begin with the '!' character.
		FString Key;
		// [optional] new value to set. Set to null to remove a value
		FString Value;
	
        FSetPublisherDataRequest() :
			FPlayFabBaseModel(),
			Key(),
			Value()
			{}
		
		FSetPublisherDataRequest(const FSetPublisherDataRequest& src) :
			FPlayFabBaseModel(),
			Key(src.Key),
			Value(src.Value)
			{}
			
		FSetPublisherDataRequest(const TSharedPtr<FJsonObject>& obj) : FSetPublisherDataRequest()
        {
            readFromValue(obj);
        }
		
		~FSetPublisherDataRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FSetPublisherDataResult : public FPlayFabBaseModel
    {
		
	
        FSetPublisherDataResult() :
			FPlayFabBaseModel()
			{}
		
		FSetPublisherDataResult(const FSetPublisherDataResult& src) :
			FPlayFabBaseModel()
			{}
			
		FSetPublisherDataResult(const TSharedPtr<FJsonObject>& obj) : FSetPublisherDataResult()
        {
            readFromValue(obj);
        }
		
		~FSetPublisherDataResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FSetTitleDataRequest : public FPlayFabBaseModel
    {
		
		// key we want to set a value on (note, this is additive - will only replace an existing key's value if they are the same name.) Keys are trimmed of whitespace. Keys may not begin with the '!' character.
		FString Key;
		// [optional] new value to set. Set to null to remove a value
		FString Value;
	
        FSetTitleDataRequest() :
			FPlayFabBaseModel(),
			Key(),
			Value()
			{}
		
		FSetTitleDataRequest(const FSetTitleDataRequest& src) :
			FPlayFabBaseModel(),
			Key(src.Key),
			Value(src.Value)
			{}
			
		FSetTitleDataRequest(const TSharedPtr<FJsonObject>& obj) : FSetTitleDataRequest()
        {
            readFromValue(obj);
        }
		
		~FSetTitleDataRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FSetTitleDataResult : public FPlayFabBaseModel
    {
		
	
        FSetTitleDataResult() :
			FPlayFabBaseModel()
			{}
		
		FSetTitleDataResult(const FSetTitleDataResult& src) :
			FPlayFabBaseModel()
			{}
			
		FSetTitleDataResult(const TSharedPtr<FJsonObject>& obj) : FSetTitleDataResult()
        {
            readFromValue(obj);
        }
		
		~FSetTitleDataResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FStatisticUpdate : public FPlayFabBaseModel
    {
		
		// unique name of the statistic
		FString StatisticName;
		// [optional] for updates to an existing statistic value for a player, the version of the statistic when it was loaded. Null when setting the statistic value for the first time.
		OptionalUint32 Version;
		// statistic value for the player
		int32 Value;
	
        FStatisticUpdate() :
			FPlayFabBaseModel(),
			StatisticName(),
			Version(),
			Value(0)
			{}
		
		FStatisticUpdate(const FStatisticUpdate& src) :
			FPlayFabBaseModel(),
			StatisticName(src.StatisticName),
			Version(src.Version),
			Value(src.Value)
			{}
			
		FStatisticUpdate(const TSharedPtr<FJsonObject>& obj) : FStatisticUpdate()
        {
            readFromValue(obj);
        }
		
		~FStatisticUpdate();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FSubtractCharacterVirtualCurrencyRequest : public FPlayFabBaseModel
    {
		
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// Unique PlayFab assigned ID for a specific character owned by a user
		FString CharacterId;
		// Name of the virtual currency which is to be decremented.
		FString VirtualCurrency;
		// Amount to be subtracted from the user balance of the specified virtual currency.
		int32 Amount;
	
        FSubtractCharacterVirtualCurrencyRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			CharacterId(),
			VirtualCurrency(),
			Amount(0)
			{}
		
		FSubtractCharacterVirtualCurrencyRequest(const FSubtractCharacterVirtualCurrencyRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			CharacterId(src.CharacterId),
			VirtualCurrency(src.VirtualCurrency),
			Amount(src.Amount)
			{}
			
		FSubtractCharacterVirtualCurrencyRequest(const TSharedPtr<FJsonObject>& obj) : FSubtractCharacterVirtualCurrencyRequest()
        {
            readFromValue(obj);
        }
		
		~FSubtractCharacterVirtualCurrencyRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FSubtractUserVirtualCurrencyRequest : public FPlayFabBaseModel
    {
		
		// PlayFab unique identifier of the user whose virtual currency balance is to be decreased.
		FString PlayFabId;
		// Name of the virtual currency which is to be decremented.
		FString VirtualCurrency;
		// Amount to be subtracted from the user balance of the specified virtual currency.
		int32 Amount;
	
        FSubtractUserVirtualCurrencyRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			VirtualCurrency(),
			Amount(0)
			{}
		
		FSubtractUserVirtualCurrencyRequest(const FSubtractUserVirtualCurrencyRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			VirtualCurrency(src.VirtualCurrency),
			Amount(src.Amount)
			{}
			
		FSubtractUserVirtualCurrencyRequest(const TSharedPtr<FJsonObject>& obj) : FSubtractUserVirtualCurrencyRequest()
        {
            readFromValue(obj);
        }
		
		~FSubtractUserVirtualCurrencyRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUnlockContainerInstanceRequest : public FPlayFabBaseModel
    {
		
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// [optional] Unique PlayFab assigned ID for a specific character owned by a user
		FString CharacterId;
		// ItemInstanceId of the container to unlock.
		FString ContainerItemInstanceId;
		// [optional] ItemInstanceId of the key that will be consumed by unlocking this container.  If the container requires a key, this parameter is required.
		FString KeyItemInstanceId;
		// [optional] Specifies the catalog version that should be used to determine container contents.  If unspecified, uses catalog associated with the item instance.
		FString CatalogVersion;
	
        FUnlockContainerInstanceRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			CharacterId(),
			ContainerItemInstanceId(),
			KeyItemInstanceId(),
			CatalogVersion()
			{}
		
		FUnlockContainerInstanceRequest(const FUnlockContainerInstanceRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			CharacterId(src.CharacterId),
			ContainerItemInstanceId(src.ContainerItemInstanceId),
			KeyItemInstanceId(src.KeyItemInstanceId),
			CatalogVersion(src.CatalogVersion)
			{}
			
		FUnlockContainerInstanceRequest(const TSharedPtr<FJsonObject>& obj) : FUnlockContainerInstanceRequest()
        {
            readFromValue(obj);
        }
		
		~FUnlockContainerInstanceRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUnlockContainerItemRequest : public FPlayFabBaseModel
    {
		
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// [optional] Unique PlayFab assigned ID for a specific character owned by a user
		FString CharacterId;
		// Catalog ItemId of the container type to unlock.
		FString ContainerItemId;
		// [optional] Specifies the catalog version that should be used to determine container contents.  If unspecified, uses default/primary catalog.
		FString CatalogVersion;
	
        FUnlockContainerItemRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			CharacterId(),
			ContainerItemId(),
			CatalogVersion()
			{}
		
		FUnlockContainerItemRequest(const FUnlockContainerItemRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			CharacterId(src.CharacterId),
			ContainerItemId(src.ContainerItemId),
			CatalogVersion(src.CatalogVersion)
			{}
			
		FUnlockContainerItemRequest(const TSharedPtr<FJsonObject>& obj) : FUnlockContainerItemRequest()
        {
            readFromValue(obj);
        }
		
		~FUnlockContainerItemRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUnlockContainerItemResult : public FPlayFabBaseModel
    {
		
		// [optional] Unique instance identifier of the container unlocked.
		FString UnlockedItemInstanceId;
		// [optional] Unique instance identifier of the key used to unlock the container, if applicable.
		FString UnlockedWithItemInstanceId;
		// [optional] Items granted to the player as a result of unlocking the container.
		TArray<FItemInstance> GrantedItems;
		// [optional] Virtual currency granted to the player as a result of unlocking the container.
		TMap<FString, uint32> VirtualCurrency;
	
        FUnlockContainerItemResult() :
			FPlayFabBaseModel(),
			UnlockedItemInstanceId(),
			UnlockedWithItemInstanceId(),
			GrantedItems(),
			VirtualCurrency()
			{}
		
		FUnlockContainerItemResult(const FUnlockContainerItemResult& src) :
			FPlayFabBaseModel(),
			UnlockedItemInstanceId(src.UnlockedItemInstanceId),
			UnlockedWithItemInstanceId(src.UnlockedWithItemInstanceId),
			GrantedItems(src.GrantedItems),
			VirtualCurrency(src.VirtualCurrency)
			{}
			
		FUnlockContainerItemResult(const TSharedPtr<FJsonObject>& obj) : FUnlockContainerItemResult()
        {
            readFromValue(obj);
        }
		
		~FUnlockContainerItemResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUpdateCharacterDataRequest : public FPlayFabBaseModel
    {
		
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// Unique PlayFab assigned ID for a specific character owned by a user
		FString CharacterId;
		// [optional] Key-value pairs to be written to the custom data. Note that keys are trimmed of whitespace, are limited in size, and may not begin with a '!' character.
		TMap<FString, FString> Data;
		// [optional] Optional list of Data-keys to remove from UserData.  Some SDKs cannot insert null-values into Data due to language constraints.  Use this to delete the keys directly.
		TArray<FString> KeysToRemove;
		// [optional] Permission to be applied to all user data keys written in this request. Defaults to "private" if not set.
		Boxed<UserDataPermission> Permission;
	
        FUpdateCharacterDataRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			CharacterId(),
			Data(),
			KeysToRemove(),
			Permission()
			{}
		
		FUpdateCharacterDataRequest(const FUpdateCharacterDataRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			CharacterId(src.CharacterId),
			Data(src.Data),
			KeysToRemove(src.KeysToRemove),
			Permission(src.Permission)
			{}
			
		FUpdateCharacterDataRequest(const TSharedPtr<FJsonObject>& obj) : FUpdateCharacterDataRequest()
        {
            readFromValue(obj);
        }
		
		~FUpdateCharacterDataRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUpdateCharacterDataResult : public FPlayFabBaseModel
    {
		
		// Indicates the current version of the data that has been set. This is incremented with every set call for that type of data (read-only, internal, etc). This version can be provided in Get calls to find updated data.
		uint32 DataVersion;
	
        FUpdateCharacterDataResult() :
			FPlayFabBaseModel(),
			DataVersion(0)
			{}
		
		FUpdateCharacterDataResult(const FUpdateCharacterDataResult& src) :
			FPlayFabBaseModel(),
			DataVersion(src.DataVersion)
			{}
			
		FUpdateCharacterDataResult(const TSharedPtr<FJsonObject>& obj) : FUpdateCharacterDataResult()
        {
            readFromValue(obj);
        }
		
		~FUpdateCharacterDataResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUpdateCharacterStatisticsRequest : public FPlayFabBaseModel
    {
		
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// Unique PlayFab assigned ID for a specific character owned by a user
		FString CharacterId;
		// [optional] Statistics to be updated with the provided values.
		TMap<FString, int32> CharacterStatistics;
	
        FUpdateCharacterStatisticsRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			CharacterId(),
			CharacterStatistics()
			{}
		
		FUpdateCharacterStatisticsRequest(const FUpdateCharacterStatisticsRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			CharacterId(src.CharacterId),
			CharacterStatistics(src.CharacterStatistics)
			{}
			
		FUpdateCharacterStatisticsRequest(const TSharedPtr<FJsonObject>& obj) : FUpdateCharacterStatisticsRequest()
        {
            readFromValue(obj);
        }
		
		~FUpdateCharacterStatisticsRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUpdateCharacterStatisticsResult : public FPlayFabBaseModel
    {
		
	
        FUpdateCharacterStatisticsResult() :
			FPlayFabBaseModel()
			{}
		
		FUpdateCharacterStatisticsResult(const FUpdateCharacterStatisticsResult& src) :
			FPlayFabBaseModel()
			{}
			
		FUpdateCharacterStatisticsResult(const TSharedPtr<FJsonObject>& obj) : FUpdateCharacterStatisticsResult()
        {
            readFromValue(obj);
        }
		
		~FUpdateCharacterStatisticsResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUpdatePlayerStatisticsRequest : public FPlayFabBaseModel
    {
		
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// [optional] Statistics to be updated with the provided values
		TArray<FStatisticUpdate> Statistics;
	
        FUpdatePlayerStatisticsRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			Statistics()
			{}
		
		FUpdatePlayerStatisticsRequest(const FUpdatePlayerStatisticsRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			Statistics(src.Statistics)
			{}
			
		FUpdatePlayerStatisticsRequest(const TSharedPtr<FJsonObject>& obj) : FUpdatePlayerStatisticsRequest()
        {
            readFromValue(obj);
        }
		
		~FUpdatePlayerStatisticsRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUpdatePlayerStatisticsResult : public FPlayFabBaseModel
    {
		
	
        FUpdatePlayerStatisticsResult() :
			FPlayFabBaseModel()
			{}
		
		FUpdatePlayerStatisticsResult(const FUpdatePlayerStatisticsResult& src) :
			FPlayFabBaseModel()
			{}
			
		FUpdatePlayerStatisticsResult(const TSharedPtr<FJsonObject>& obj) : FUpdatePlayerStatisticsResult()
        {
            readFromValue(obj);
        }
		
		~FUpdatePlayerStatisticsResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUpdateSharedGroupDataRequest : public FPlayFabBaseModel
    {
		
		// Unique identifier for the shared group.
		FString SharedGroupId;
		// [optional] Key-value pairs to be written to the custom data. Note that keys are trimmed of whitespace, are limited in size, and may not begin with a '!' character.
		TMap<FString, FString> Data;
		// [optional] Optional list of Data-keys to remove from UserData.  Some SDKs cannot insert null-values into Data due to language constraints.  Use this to delete the keys directly.
		TArray<FString> KeysToRemove;
		// [optional] Permission to be applied to all user data keys in this request.
		Boxed<UserDataPermission> Permission;
	
        FUpdateSharedGroupDataRequest() :
			FPlayFabBaseModel(),
			SharedGroupId(),
			Data(),
			KeysToRemove(),
			Permission()
			{}
		
		FUpdateSharedGroupDataRequest(const FUpdateSharedGroupDataRequest& src) :
			FPlayFabBaseModel(),
			SharedGroupId(src.SharedGroupId),
			Data(src.Data),
			KeysToRemove(src.KeysToRemove),
			Permission(src.Permission)
			{}
			
		FUpdateSharedGroupDataRequest(const TSharedPtr<FJsonObject>& obj) : FUpdateSharedGroupDataRequest()
        {
            readFromValue(obj);
        }
		
		~FUpdateSharedGroupDataRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUpdateSharedGroupDataResult : public FPlayFabBaseModel
    {
		
	
        FUpdateSharedGroupDataResult() :
			FPlayFabBaseModel()
			{}
		
		FUpdateSharedGroupDataResult(const FUpdateSharedGroupDataResult& src) :
			FPlayFabBaseModel()
			{}
			
		FUpdateSharedGroupDataResult(const TSharedPtr<FJsonObject>& obj) : FUpdateSharedGroupDataResult()
        {
            readFromValue(obj);
        }
		
		~FUpdateSharedGroupDataResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUpdateUserDataRequest : public FPlayFabBaseModel
    {
		
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// [optional] Key-value pairs to be written to the custom data. Note that keys are trimmed of whitespace, are limited in size, and may not begin with a '!' character.
		TMap<FString, FString> Data;
		// [optional] Optional list of Data-keys to remove from UserData.  Some SDKs cannot insert null-values into Data due to language constraints.  Use this to delete the keys directly.
		TArray<FString> KeysToRemove;
		// [optional] Permission to be applied to all user data keys written in this request. Defaults to "private" if not set.
		Boxed<UserDataPermission> Permission;
	
        FUpdateUserDataRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			Data(),
			KeysToRemove(),
			Permission()
			{}
		
		FUpdateUserDataRequest(const FUpdateUserDataRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			Data(src.Data),
			KeysToRemove(src.KeysToRemove),
			Permission(src.Permission)
			{}
			
		FUpdateUserDataRequest(const TSharedPtr<FJsonObject>& obj) : FUpdateUserDataRequest()
        {
            readFromValue(obj);
        }
		
		~FUpdateUserDataRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUpdateUserDataResult : public FPlayFabBaseModel
    {
		
		// Indicates the current version of the data that has been set. This is incremented with every set call for that type of data (read-only, internal, etc). This version can be provided in Get calls to find updated data.
		uint32 DataVersion;
	
        FUpdateUserDataResult() :
			FPlayFabBaseModel(),
			DataVersion(0)
			{}
		
		FUpdateUserDataResult(const FUpdateUserDataResult& src) :
			FPlayFabBaseModel(),
			DataVersion(src.DataVersion)
			{}
			
		FUpdateUserDataResult(const TSharedPtr<FJsonObject>& obj) : FUpdateUserDataResult()
        {
            readFromValue(obj);
        }
		
		~FUpdateUserDataResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUpdateUserInternalDataRequest : public FPlayFabBaseModel
    {
		
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// [optional] Key-value pairs to be written to the custom data. Note that keys are trimmed of whitespace, are limited in size, and may not begin with a '!' character.
		TMap<FString, FString> Data;
		// [optional] Optional list of Data-keys to remove from UserData.  Some SDKs cannot insert null-values into Data due to language constraints.  Use this to delete the keys directly.
		TArray<FString> KeysToRemove;
	
        FUpdateUserInternalDataRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			Data(),
			KeysToRemove()
			{}
		
		FUpdateUserInternalDataRequest(const FUpdateUserInternalDataRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			Data(src.Data),
			KeysToRemove(src.KeysToRemove)
			{}
			
		FUpdateUserInternalDataRequest(const TSharedPtr<FJsonObject>& obj) : FUpdateUserInternalDataRequest()
        {
            readFromValue(obj);
        }
		
		~FUpdateUserInternalDataRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUpdateUserInventoryItemDataRequest : public FPlayFabBaseModel
    {
		
		// [optional] Unique PlayFab assigned ID for a specific character owned by a user
		FString CharacterId;
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// Unique PlayFab assigned instance identifier of the item
		FString ItemInstanceId;
		// [optional] Key-value pairs to be written to the custom data. Note that keys are trimmed of whitespace, are limited in size, and may not begin with a '!' character.
		TMap<FString, FString> Data;
		// [optional] Optional list of Data-keys to remove from UserData.  Some SDKs cannot insert null-values into Data due to language constraints.  Use this to delete the keys directly.
		TArray<FString> KeysToRemove;
	
        FUpdateUserInventoryItemDataRequest() :
			FPlayFabBaseModel(),
			CharacterId(),
			PlayFabId(),
			ItemInstanceId(),
			Data(),
			KeysToRemove()
			{}
		
		FUpdateUserInventoryItemDataRequest(const FUpdateUserInventoryItemDataRequest& src) :
			FPlayFabBaseModel(),
			CharacterId(src.CharacterId),
			PlayFabId(src.PlayFabId),
			ItemInstanceId(src.ItemInstanceId),
			Data(src.Data),
			KeysToRemove(src.KeysToRemove)
			{}
			
		FUpdateUserInventoryItemDataRequest(const TSharedPtr<FJsonObject>& obj) : FUpdateUserInventoryItemDataRequest()
        {
            readFromValue(obj);
        }
		
		~FUpdateUserInventoryItemDataRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUpdateUserInventoryItemDataResult : public FPlayFabBaseModel
    {
		
	
        FUpdateUserInventoryItemDataResult() :
			FPlayFabBaseModel()
			{}
		
		FUpdateUserInventoryItemDataResult(const FUpdateUserInventoryItemDataResult& src) :
			FPlayFabBaseModel()
			{}
			
		FUpdateUserInventoryItemDataResult(const TSharedPtr<FJsonObject>& obj) : FUpdateUserInventoryItemDataResult()
        {
            readFromValue(obj);
        }
		
		~FUpdateUserInventoryItemDataResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUpdateUserStatisticsRequest : public FPlayFabBaseModel
    {
		
		// Unique PlayFab assigned ID of the user on whom the operation will be performed.
		FString PlayFabId;
		// [optional] Statistics to be updated with the provided values.
		TMap<FString, int32> UserStatistics;
	
        FUpdateUserStatisticsRequest() :
			FPlayFabBaseModel(),
			PlayFabId(),
			UserStatistics()
			{}
		
		FUpdateUserStatisticsRequest(const FUpdateUserStatisticsRequest& src) :
			FPlayFabBaseModel(),
			PlayFabId(src.PlayFabId),
			UserStatistics(src.UserStatistics)
			{}
			
		FUpdateUserStatisticsRequest(const TSharedPtr<FJsonObject>& obj) : FUpdateUserStatisticsRequest()
        {
            readFromValue(obj);
        }
		
		~FUpdateUserStatisticsRequest();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	
	struct PLAYFAB_API FUpdateUserStatisticsResult : public FPlayFabBaseModel
    {
		
	
        FUpdateUserStatisticsResult() :
			FPlayFabBaseModel()
			{}
		
		FUpdateUserStatisticsResult(const FUpdateUserStatisticsResult& src) :
			FPlayFabBaseModel()
			{}
			
		FUpdateUserStatisticsResult(const TSharedPtr<FJsonObject>& obj) : FUpdateUserStatisticsResult()
        {
            readFromValue(obj);
        }
		
		~FUpdateUserStatisticsResult();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	

}
}

