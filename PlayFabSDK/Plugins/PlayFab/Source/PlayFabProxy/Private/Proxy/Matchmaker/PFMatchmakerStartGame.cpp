// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabProxyPrivatePCH.h"
#include "PFMatchmakerStartGame.h"

UPFMatchmakerStartGame::UPFMatchmakerStartGame(const FObjectInitializer& ObjectInitializer)
	: Super(ObjectInitializer)
	, SuccessDelegate(PlayFab::UPlayFabMatchmakerAPI::FStartGameDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
	, ErrorDelegate(PlayFab::FPlayFabErrorDelegate::CreateUObject(this, &ThisClass::OnErrorCallback))
{
}

UPFMatchmakerStartGame* UPFMatchmakerStartGame::StartGame(UObject* WorldContextObject, class APlayerController* PlayerController , const FString& InBuild, const FString& InGameMode, const FString& InCustomCommandLineData, const FString& InExternalMatchmakerEventEndpoint)
{
	UPFMatchmakerStartGame* Proxy = NewObject<UPFMatchmakerStartGame>();
 	//Proxy->PlayerControllerWeakPtr = PlayerController;
	Proxy->Request.Build = InBuild;
	
	Proxy->Request.GameMode = InGameMode;
	Proxy->Request.CustomCommandLineData = InCustomCommandLineData;
	Proxy->Request.ExternalMatchmakerEventEndpoint = InExternalMatchmakerEventEndpoint;
	

 	//Proxy->WorldContextObject = WorldContextObject;
	return Proxy;
}

void UPFMatchmakerStartGame::Activate()
{
	// grab the module, so we can get a valid pointer to the client API 
	PlayFabMatchmakerPtr MatchmakerAPI = IPlayFabModuleInterface::Get().GetMatchmakerAPI();

	bool CallResult = false;

	if(MatchmakerAPI.IsValid())
	{	
		CallResult = MatchmakerAPI->StartGame(Request, SuccessDelegate, ErrorDelegate);
	}

	if(CallResult == false)
	{
		FBPMatchmakerStartGameResponse BPResult;
 		OnFailure.Broadcast(BPResult);
	}
}


//////////////////////////////////////////////////////////////////////////
// Delegate handles
void UPFMatchmakerStartGame::OnSuccessCallback(const PlayFab::MatchmakerModels::FStartGameResponse& Result)
{
	FBPMatchmakerStartGameResponse BPResult;
 	BPResult.Data = Result;
 	OnSuccess.Broadcast(BPResult);
}

void UPFMatchmakerStartGame::OnErrorCallback(const PlayFab::FPlayFabError& InError)
{
	FBPMatchmakerStartGameResponse BPResult;
 	OnFailure.Broadcast(BPResult);	
}
