// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabProxyPrivatePCH.h"
#include "PlayFabAdminBPLibrary.h"


void UPFAdminProxyLibrary::BreakBPAdminAddNewsRequest(
		const FBPAdminAddNewsRequest& In
        ,FDateTime& OutTimestamp
        ,FString& OutTitle
        ,FString& OutBody
	)
{
    
	OutTitle = In.Data.Title;
	OutBody = In.Data.Body;
	
}

void UPFAdminProxyLibrary::BreakBPAdminAddNewsResult(
		const FBPAdminAddNewsResult& In
        ,FString& OutNewsId
	)
{
    OutNewsId = In.Data.NewsId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminAddServerBuildRequest(
		const FBPAdminAddServerBuildRequest& In
        ,FString& OutBuildId
        ,FString& OutCommandLineTemplate
        ,FString& OutExecutablePath
        ,FString& OutComment
        ,int32& OutMaxGamesPerHost
	)
{
    OutBuildId = In.Data.BuildId;
	OutCommandLineTemplate = In.Data.CommandLineTemplate;
	OutExecutablePath = In.Data.ExecutablePath;
	
	OutComment = In.Data.Comment;
	OutMaxGamesPerHost = In.Data.MaxGamesPerHost;
	
}

void UPFAdminProxyLibrary::BreakBPAdminAddServerBuildResult(
		const FBPAdminAddServerBuildResult& In
        ,FString& OutBuildId
        ,int32& OutMaxGamesPerHost
        ,FString& OutCommandLineTemplate
        ,FString& OutExecutablePath
        ,FString& OutComment
        ,FDateTime& OutTimestamp
        ,FString& OutTitleId
	)
{
    OutBuildId = In.Data.BuildId;
	
	OutMaxGamesPerHost = In.Data.MaxGamesPerHost;
	OutCommandLineTemplate = In.Data.CommandLineTemplate;
	OutExecutablePath = In.Data.ExecutablePath;
	OutComment = In.Data.Comment;
	
	OutTitleId = In.Data.TitleId;
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminAddUserVirtualCurrencyRequest(
		const FBPAdminAddUserVirtualCurrencyRequest& In
        ,FString& OutPlayFabId
        ,FString& OutVirtualCurrency
        ,int32& OutAmount
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutVirtualCurrency = In.Data.VirtualCurrency;
	OutAmount = In.Data.Amount;
	
}

void UPFAdminProxyLibrary::BreakBPAdminAddVirtualCurrencyTypesRequest(
		const FBPAdminAddVirtualCurrencyTypesRequest& In
        ,TArray<FBPAdminVirtualCurrencyData>& OutVirtualCurrencies
	)
{
    for (const PlayFab::AdminModels::FVirtualCurrencyData& elem : In.Data.VirtualCurrencies)
    {
        FBPAdminVirtualCurrencyData result;
        result.Data = elem;
        OutVirtualCurrencies.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminBlankResult(
		const FBPAdminBlankResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminCatalogItem(
		const FBPAdminCatalogItem& In
        ,FString& OutItemId
        ,FString& OutItemClass
        ,FString& OutCatalogVersion
        ,FString& OutDisplayName
        ,FString& OutDescription
        ,TArray<FString>& OutTags
        ,FString& OutCustomData
        ,FBPAdminCatalogItemConsumableInfo& OutConsumable
        ,FBPAdminCatalogItemContainerInfo& OutContainer
        ,FBPAdminCatalogItemBundleInfo& OutBundle
        ,bool& OutCanBecomeCharacter
        ,bool& OutIsStackable
        ,bool& OutIsTradable
        ,FString& OutItemImageUrl
	)
{
    OutItemId = In.Data.ItemId;
	OutItemClass = In.Data.ItemClass;
	OutCatalogVersion = In.Data.CatalogVersion;
	OutDisplayName = In.Data.DisplayName;
	OutDescription = In.Data.Description;
	
	
	OutTags = In.Data.Tags;
	OutCustomData = In.Data.CustomData;
	if (In.Data.Consumable.IsValid()) {    OutConsumable.Data = *In.Data.Consumable;}
	if (In.Data.Container.IsValid()) {    OutContainer.Data = *In.Data.Container;}
	if (In.Data.Bundle.IsValid()) {    OutBundle.Data = *In.Data.Bundle;}
	OutCanBecomeCharacter = In.Data.CanBecomeCharacter;
	OutIsStackable = In.Data.IsStackable;
	OutIsTradable = In.Data.IsTradable;
	OutItemImageUrl = In.Data.ItemImageUrl;
	
}

void UPFAdminProxyLibrary::BreakBPAdminCatalogItemBundleInfo(
		const FBPAdminCatalogItemBundleInfo& In
        ,TArray<FString>& OutBundledItems
        ,TArray<FString>& OutBundledResultTables
	)
{
    OutBundledItems = In.Data.BundledItems;
	OutBundledResultTables = In.Data.BundledResultTables;
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminCatalogItemConsumableInfo(
		const FBPAdminCatalogItemConsumableInfo& In
        ,int32& OutUsageCount
        ,int32& OutUsagePeriod
        ,FString& OutUsagePeriodGroup
	)
{
    OutUsageCount = In.Data.UsageCount;
	OutUsagePeriod = In.Data.UsagePeriod;
	OutUsagePeriodGroup = In.Data.UsagePeriodGroup;
	
}

void UPFAdminProxyLibrary::BreakBPAdminCatalogItemContainerInfo(
		const FBPAdminCatalogItemContainerInfo& In
        ,FString& OutKeyItemId
        ,TArray<FString>& OutItemContents
        ,TArray<FString>& OutResultTableContents
	)
{
    OutKeyItemId = In.Data.KeyItemId;
	OutItemContents = In.Data.ItemContents;
	OutResultTableContents = In.Data.ResultTableContents;
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminCloudScriptFile(
		const FBPAdminCloudScriptFile& In
        ,FString& OutFilename
        ,FString& OutFileContents
	)
{
    OutFilename = In.Data.Filename;
	OutFileContents = In.Data.FileContents;
	
}

void UPFAdminProxyLibrary::BreakBPAdminCloudScriptVersionStatus(
		const FBPAdminCloudScriptVersionStatus& In
        ,int32& OutVersion
        ,int32& OutPublishedRevision
        ,int32& OutLatestRevision
	)
{
    OutVersion = In.Data.Version;
	OutPublishedRevision = In.Data.PublishedRevision;
	OutLatestRevision = In.Data.LatestRevision;
	
}

void UPFAdminProxyLibrary::BreakBPAdminContentInfo(
		const FBPAdminContentInfo& In
        ,FString& OutKey
        ,int32& OutSize
        ,FDateTime& OutLastModified
	)
{
    OutKey = In.Data.Key;
	OutSize = In.Data.Size;
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminCurrency(
		const FBPAdminCurrency& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminDeleteContentRequest(
		const FBPAdminDeleteContentRequest& In
        ,FString& OutKey
	)
{
    OutKey = In.Data.Key;
	
}

void UPFAdminProxyLibrary::BreakBPAdminDeleteUsersRequest(
		const FBPAdminDeleteUsersRequest& In
        ,TArray<FString>& OutPlayFabIds
        ,FString& OutTitleId
	)
{
    OutPlayFabIds = In.Data.PlayFabIds;
	OutTitleId = In.Data.TitleId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminDeleteUsersResult(
		const FBPAdminDeleteUsersResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminGameBuildStatus(
		const FBPAdminGameBuildStatus& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminGameModeInfo(
		const FBPAdminGameModeInfo& In
        ,FString& OutGamemode
        ,int32& OutMinPlayerCount
        ,int32& OutMaxPlayerCount
	)
{
    OutGamemode = In.Data.Gamemode;
	OutMinPlayerCount = In.Data.MinPlayerCount;
	OutMaxPlayerCount = In.Data.MaxPlayerCount;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetCatalogItemsRequest(
		const FBPAdminGetCatalogItemsRequest& In
        ,FString& OutCatalogVersion
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetCatalogItemsResult(
		const FBPAdminGetCatalogItemsResult& In
        ,TArray<FBPAdminCatalogItem>& OutCatalog
	)
{
    for (const PlayFab::AdminModels::FCatalogItem& elem : In.Data.Catalog)
    {
        FBPAdminCatalogItem result;
        result.Data = elem;
        OutCatalog.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminGetCloudScriptRevisionRequest(
		const FBPAdminGetCloudScriptRevisionRequest& In
        ,int32& OutVersion
        ,int32& OutRevision
	)
{
    OutVersion = In.Data.Version;
	OutRevision = In.Data.Revision;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetCloudScriptRevisionResult(
		const FBPAdminGetCloudScriptRevisionResult& In
        ,int32& OutVersion
        ,int32& OutRevision
        ,FDateTime& OutCreatedAt
        ,TArray<FBPAdminCloudScriptFile>& OutFiles
        ,bool& OutIsPublished
	)
{
    OutVersion = In.Data.Version;
	OutRevision = In.Data.Revision;
	
	for (const PlayFab::AdminModels::FCloudScriptFile& elem : In.Data.Files)
    {
        FBPAdminCloudScriptFile result;
        result.Data = elem;
        OutFiles.Add(result);
    }

	OutIsPublished = In.Data.IsPublished;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetCloudScriptVersionsRequest(
		const FBPAdminGetCloudScriptVersionsRequest& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminGetCloudScriptVersionsResult(
		const FBPAdminGetCloudScriptVersionsResult& In
        ,TArray<FBPAdminCloudScriptVersionStatus>& OutVersions
	)
{
    for (const PlayFab::AdminModels::FCloudScriptVersionStatus& elem : In.Data.Versions)
    {
        FBPAdminCloudScriptVersionStatus result;
        result.Data = elem;
        OutVersions.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminGetContentListRequest(
		const FBPAdminGetContentListRequest& In
        ,FString& OutPrefix
	)
{
    OutPrefix = In.Data.Prefix;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetContentListResult(
		const FBPAdminGetContentListResult& In
        ,int32& OutItemCount
        ,int32& OutTotalSize
        ,TArray<FBPAdminContentInfo>& OutContents
	)
{
    OutItemCount = In.Data.ItemCount;
	OutTotalSize = In.Data.TotalSize;
	for (const PlayFab::AdminModels::FContentInfo& elem : In.Data.Contents)
    {
        FBPAdminContentInfo result;
        result.Data = elem;
        OutContents.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminGetContentUploadUrlRequest(
		const FBPAdminGetContentUploadUrlRequest& In
        ,FString& OutKey
        ,FString& OutContentType
	)
{
    OutKey = In.Data.Key;
	OutContentType = In.Data.ContentType;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetContentUploadUrlResult(
		const FBPAdminGetContentUploadUrlResult& In
        ,FString& OutURL
	)
{
    OutURL = In.Data.URL;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetDataReportRequest(
		const FBPAdminGetDataReportRequest& In
        ,FString& OutReportName
        ,int32& OutYear
        ,int32& OutMonth
        ,int32& OutDay
	)
{
    OutReportName = In.Data.ReportName;
	OutYear = In.Data.Year;
	OutMonth = In.Data.Month;
	OutDay = In.Data.Day;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetDataReportResult(
		const FBPAdminGetDataReportResult& In
        ,FString& OutDownloadUrl
	)
{
    OutDownloadUrl = In.Data.DownloadUrl;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetMatchmakerGameInfoRequest(
		const FBPAdminGetMatchmakerGameInfoRequest& In
        ,FString& OutLobbyId
	)
{
    OutLobbyId = In.Data.LobbyId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetMatchmakerGameInfoResult(
		const FBPAdminGetMatchmakerGameInfoResult& In
        ,FString& OutLobbyId
        ,FString& OutTitleId
        ,FDateTime& OutStartTime
        ,FDateTime& OutEndTime
        ,FString& OutMode
        ,FString& OutBuildVersion
        ,TArray<FString>& OutPlayers
        ,FString& OutServerAddress
        ,int32& OutServerPort
	)
{
    OutLobbyId = In.Data.LobbyId;
	OutTitleId = In.Data.TitleId;
	
	
	OutMode = In.Data.Mode;
	OutBuildVersion = In.Data.BuildVersion;
	
	OutPlayers = In.Data.Players;
	OutServerAddress = In.Data.ServerAddress;
	OutServerPort = In.Data.ServerPort;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetMatchmakerGameModesRequest(
		const FBPAdminGetMatchmakerGameModesRequest& In
        ,FString& OutBuildVersion
	)
{
    OutBuildVersion = In.Data.BuildVersion;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetMatchmakerGameModesResult(
		const FBPAdminGetMatchmakerGameModesResult& In
        ,TArray<FBPAdminGameModeInfo>& OutGameModes
	)
{
    for (const PlayFab::AdminModels::FGameModeInfo& elem : In.Data.GameModes)
    {
        FBPAdminGameModeInfo result;
        result.Data = elem;
        OutGameModes.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminGetPublisherDataRequest(
		const FBPAdminGetPublisherDataRequest& In
        ,TArray<FString>& OutKeys
	)
{
    OutKeys = In.Data.Keys;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetPublisherDataResult(
		const FBPAdminGetPublisherDataResult& In
	)
{
    
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetRandomResultTablesRequest(
		const FBPAdminGetRandomResultTablesRequest& In
        ,FString& OutCatalogVersion
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetRandomResultTablesResult(
		const FBPAdminGetRandomResultTablesResult& In
	)
{
    
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetServerBuildInfoRequest(
		const FBPAdminGetServerBuildInfoRequest& In
        ,FString& OutBuildId
	)
{
    OutBuildId = In.Data.BuildId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetServerBuildInfoResult(
		const FBPAdminGetServerBuildInfoResult& In
        ,FString& OutBuildId
        ,int32& OutMaxGamesPerHost
        ,FString& OutComment
        ,FDateTime& OutTimestamp
        ,FString& OutTitleId
        ,FString& OutErrorMessage
	)
{
    OutBuildId = In.Data.BuildId;
	
	OutMaxGamesPerHost = In.Data.MaxGamesPerHost;
	OutComment = In.Data.Comment;
	
	OutTitleId = In.Data.TitleId;
	
	OutErrorMessage = In.Data.ErrorMessage;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetServerBuildUploadURLRequest(
		const FBPAdminGetServerBuildUploadURLRequest& In
        ,FString& OutBuildId
	)
{
    OutBuildId = In.Data.BuildId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetServerBuildUploadURLResult(
		const FBPAdminGetServerBuildUploadURLResult& In
        ,FString& OutURL
	)
{
    OutURL = In.Data.URL;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetStoreItemsRequest(
		const FBPAdminGetStoreItemsRequest& In
        ,FString& OutCatalogVersion
        ,FString& OutStoreId
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	OutStoreId = In.Data.StoreId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetStoreItemsResult(
		const FBPAdminGetStoreItemsResult& In
        ,TArray<FBPAdminStoreItem>& OutStore
	)
{
    for (const PlayFab::AdminModels::FStoreItem& elem : In.Data.Store)
    {
        FBPAdminStoreItem result;
        result.Data = elem;
        OutStore.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminGetTitleDataRequest(
		const FBPAdminGetTitleDataRequest& In
        ,TArray<FString>& OutKeys
	)
{
    OutKeys = In.Data.Keys;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetTitleDataResult(
		const FBPAdminGetTitleDataResult& In
	)
{
    
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetUserDataRequest(
		const FBPAdminGetUserDataRequest& In
        ,FString& OutPlayFabId
        ,TArray<FString>& OutKeys
        ,int32& OutIfChangedFromDataVersion
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutKeys = In.Data.Keys;
	OutIfChangedFromDataVersion = In.Data.IfChangedFromDataVersion;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetUserDataResult(
		const FBPAdminGetUserDataResult& In
        ,FString& OutPlayFabId
        ,int32& OutDataVersion
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutDataVersion = In.Data.DataVersion;
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetUserInventoryRequest(
		const FBPAdminGetUserInventoryRequest& In
        ,FString& OutPlayFabId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetUserInventoryResult(
		const FBPAdminGetUserInventoryResult& In
        ,FString& OutPlayFabId
        ,TArray<FBPAdminItemInstance>& OutInventory
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	for (const PlayFab::AdminModels::FItemInstance& elem : In.Data.Inventory)
    {
        FBPAdminItemInstance result;
        result.Data = elem;
        OutInventory.Add(result);
    }

	
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminGrantedItemInstance(
		const FBPAdminGrantedItemInstance& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
        ,bool& OutResult
        ,FString& OutItemId
        ,FString& OutItemInstanceId
        ,FString& OutItemClass
        ,FDateTime& OutPurchaseDate
        ,FDateTime& OutExpiration
        ,int32& OutRemainingUses
        ,int32& OutUsesIncrementedBy
        ,FString& OutAnnotation
        ,FString& OutCatalogVersion
        ,FString& OutBundleParent
        ,FString& OutDisplayName
        ,FString& OutUnitCurrency
        ,int32& OutUnitPrice
        ,TArray<FString>& OutBundleContents
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	OutResult = In.Data.Result;
	OutItemId = In.Data.ItemId;
	OutItemInstanceId = In.Data.ItemInstanceId;
	OutItemClass = In.Data.ItemClass;
	
	
	OutRemainingUses = In.Data.RemainingUses;
	OutUsesIncrementedBy = In.Data.UsesIncrementedBy;
	OutAnnotation = In.Data.Annotation;
	OutCatalogVersion = In.Data.CatalogVersion;
	OutBundleParent = In.Data.BundleParent;
	OutDisplayName = In.Data.DisplayName;
	OutUnitCurrency = In.Data.UnitCurrency;
	OutUnitPrice = In.Data.UnitPrice;
	OutBundleContents = In.Data.BundleContents;
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminGrantItemsToUsersRequest(
		const FBPAdminGrantItemsToUsersRequest& In
        ,FString& OutCatalogVersion
        ,TArray<FBPAdminItemGrant>& OutItemGrants
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	for (const PlayFab::AdminModels::FItemGrant& elem : In.Data.ItemGrants)
    {
        FBPAdminItemGrant result;
        result.Data = elem;
        OutItemGrants.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminGrantItemsToUsersResult(
		const FBPAdminGrantItemsToUsersResult& In
        ,TArray<FBPAdminGrantedItemInstance>& OutItemGrantResults
	)
{
    for (const PlayFab::AdminModels::FGrantedItemInstance& elem : In.Data.ItemGrantResults)
    {
        FBPAdminGrantedItemInstance result;
        result.Data = elem;
        OutItemGrantResults.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminItemGrant(
		const FBPAdminItemGrant& In
        ,FString& OutPlayFabId
        ,FString& OutItemId
        ,FString& OutAnnotation
        ,FString& OutCharacterId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutItemId = In.Data.ItemId;
	OutAnnotation = In.Data.Annotation;
	OutCharacterId = In.Data.CharacterId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminItemInstance(
		const FBPAdminItemInstance& In
        ,FString& OutItemId
        ,FString& OutItemInstanceId
        ,FString& OutItemClass
        ,FDateTime& OutPurchaseDate
        ,FDateTime& OutExpiration
        ,int32& OutRemainingUses
        ,int32& OutUsesIncrementedBy
        ,FString& OutAnnotation
        ,FString& OutCatalogVersion
        ,FString& OutBundleParent
        ,FString& OutDisplayName
        ,FString& OutUnitCurrency
        ,int32& OutUnitPrice
        ,TArray<FString>& OutBundleContents
	)
{
    OutItemId = In.Data.ItemId;
	OutItemInstanceId = In.Data.ItemInstanceId;
	OutItemClass = In.Data.ItemClass;
	
	
	OutRemainingUses = In.Data.RemainingUses;
	OutUsesIncrementedBy = In.Data.UsesIncrementedBy;
	OutAnnotation = In.Data.Annotation;
	OutCatalogVersion = In.Data.CatalogVersion;
	OutBundleParent = In.Data.BundleParent;
	OutDisplayName = In.Data.DisplayName;
	OutUnitCurrency = In.Data.UnitCurrency;
	OutUnitPrice = In.Data.UnitPrice;
	OutBundleContents = In.Data.BundleContents;
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminListBuildsRequest(
		const FBPAdminListBuildsRequest& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminListBuildsResult(
		const FBPAdminListBuildsResult& In
        ,TArray<FBPAdminGetServerBuildInfoResult>& OutBuilds
	)
{
    for (const PlayFab::AdminModels::FGetServerBuildInfoResult& elem : In.Data.Builds)
    {
        FBPAdminGetServerBuildInfoResult result;
        result.Data = elem;
        OutBuilds.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminListVirtualCurrencyTypesRequest(
		const FBPAdminListVirtualCurrencyTypesRequest& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminListVirtualCurrencyTypesResult(
		const FBPAdminListVirtualCurrencyTypesResult& In
        ,TArray<FBPAdminVirtualCurrencyData>& OutVirtualCurrencies
	)
{
    for (const PlayFab::AdminModels::FVirtualCurrencyData& elem : In.Data.VirtualCurrencies)
    {
        FBPAdminVirtualCurrencyData result;
        result.Data = elem;
        OutVirtualCurrencies.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminLookupUserAccountInfoRequest(
		const FBPAdminLookupUserAccountInfoRequest& In
        ,FString& OutPlayFabId
        ,FString& OutEmail
        ,FString& OutUsername
        ,FString& OutTitleDisplayName
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutEmail = In.Data.Email;
	OutUsername = In.Data.Username;
	OutTitleDisplayName = In.Data.TitleDisplayName;
	
}

void UPFAdminProxyLibrary::BreakBPAdminLookupUserAccountInfoResult(
		const FBPAdminLookupUserAccountInfoResult& In
        ,FBPAdminUserAccountInfo& OutUserInfo
	)
{
    if (In.Data.UserInfo.IsValid()) {    OutUserInfo.Data = *In.Data.UserInfo;}
	
}

void UPFAdminProxyLibrary::BreakBPAdminModifyMatchmakerGameModesRequest(
		const FBPAdminModifyMatchmakerGameModesRequest& In
        ,FString& OutBuildVersion
        ,TArray<FBPAdminGameModeInfo>& OutGameModes
	)
{
    OutBuildVersion = In.Data.BuildVersion;
	for (const PlayFab::AdminModels::FGameModeInfo& elem : In.Data.GameModes)
    {
        FBPAdminGameModeInfo result;
        result.Data = elem;
        OutGameModes.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminModifyMatchmakerGameModesResult(
		const FBPAdminModifyMatchmakerGameModesResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminModifyServerBuildRequest(
		const FBPAdminModifyServerBuildRequest& In
        ,FString& OutBuildId
        ,FDateTime& OutTimestamp
        ,int32& OutMaxGamesPerHost
        ,FString& OutCommandLineTemplate
        ,FString& OutExecutablePath
        ,FString& OutComment
	)
{
    OutBuildId = In.Data.BuildId;
	
	
	OutMaxGamesPerHost = In.Data.MaxGamesPerHost;
	OutCommandLineTemplate = In.Data.CommandLineTemplate;
	OutExecutablePath = In.Data.ExecutablePath;
	OutComment = In.Data.Comment;
	
}

void UPFAdminProxyLibrary::BreakBPAdminModifyServerBuildResult(
		const FBPAdminModifyServerBuildResult& In
        ,FString& OutBuildId
        ,int32& OutMaxGamesPerHost
        ,FString& OutCommandLineTemplate
        ,FString& OutExecutablePath
        ,FString& OutComment
        ,FDateTime& OutTimestamp
        ,FString& OutTitleId
	)
{
    OutBuildId = In.Data.BuildId;
	
	OutMaxGamesPerHost = In.Data.MaxGamesPerHost;
	OutCommandLineTemplate = In.Data.CommandLineTemplate;
	OutExecutablePath = In.Data.ExecutablePath;
	OutComment = In.Data.Comment;
	
	OutTitleId = In.Data.TitleId;
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminModifyUserVirtualCurrencyResult(
		const FBPAdminModifyUserVirtualCurrencyResult& In
        ,FString& OutPlayFabId
        ,FString& OutVirtualCurrency
        ,int32& OutBalanceChange
        ,int32& OutBalance
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutVirtualCurrency = In.Data.VirtualCurrency;
	OutBalanceChange = In.Data.BalanceChange;
	OutBalance = In.Data.Balance;
	
}

void UPFAdminProxyLibrary::BreakBPAdminRandomResultTable(
		const FBPAdminRandomResultTable& In
        ,FString& OutTableId
        ,TArray<FBPAdminResultTableNode>& OutNodes
	)
{
    OutTableId = In.Data.TableId;
	for (const PlayFab::AdminModels::FResultTableNode& elem : In.Data.Nodes)
    {
        FBPAdminResultTableNode result;
        result.Data = elem;
        OutNodes.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminRandomResultTableListing(
		const FBPAdminRandomResultTableListing& In
        ,FString& OutCatalogVersion
        ,FString& OutTableId
        ,TArray<FBPAdminResultTableNode>& OutNodes
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	OutTableId = In.Data.TableId;
	for (const PlayFab::AdminModels::FResultTableNode& elem : In.Data.Nodes)
    {
        FBPAdminResultTableNode result;
        result.Data = elem;
        OutNodes.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminRefundPurchaseRequest(
		const FBPAdminRefundPurchaseRequest& In
        ,FString& OutPlayFabId
        ,FString& OutOrderId
        ,FString& OutReason
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutOrderId = In.Data.OrderId;
	OutReason = In.Data.Reason;
	
}

void UPFAdminProxyLibrary::BreakBPAdminRefundPurchaseResponse(
		const FBPAdminRefundPurchaseResponse& In
        ,FString& OutPurchaseStatus
	)
{
    OutPurchaseStatus = In.Data.PurchaseStatus;
	
}

void UPFAdminProxyLibrary::BreakBPAdminRegion(
		const FBPAdminRegion& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminRemoveServerBuildRequest(
		const FBPAdminRemoveServerBuildRequest& In
        ,FString& OutBuildId
	)
{
    OutBuildId = In.Data.BuildId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminRemoveServerBuildResult(
		const FBPAdminRemoveServerBuildResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminResetCharacterStatisticsRequest(
		const FBPAdminResetCharacterStatisticsRequest& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminResetCharacterStatisticsResult(
		const FBPAdminResetCharacterStatisticsResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminResetUsersRequest(
		const FBPAdminResetUsersRequest& In
        ,TArray<FBPAdminUserCredentials>& OutUsers
	)
{
    for (const PlayFab::AdminModels::FUserCredentials& elem : In.Data.Users)
    {
        FBPAdminUserCredentials result;
        result.Data = elem;
        OutUsers.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminResetUserStatisticsRequest(
		const FBPAdminResetUserStatisticsRequest& In
        ,FString& OutPlayFabId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminResetUserStatisticsResult(
		const FBPAdminResetUserStatisticsResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminResolutionOutcome(
		const FBPAdminResolutionOutcome& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminResolvePurchaseDisputeRequest(
		const FBPAdminResolvePurchaseDisputeRequest& In
        ,FString& OutPlayFabId
        ,FString& OutOrderId
        ,FString& OutReason
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutOrderId = In.Data.OrderId;
	OutReason = In.Data.Reason;
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminResolvePurchaseDisputeResponse(
		const FBPAdminResolvePurchaseDisputeResponse& In
        ,FString& OutPurchaseStatus
	)
{
    OutPurchaseStatus = In.Data.PurchaseStatus;
	
}

void UPFAdminProxyLibrary::BreakBPAdminResultTableNode(
		const FBPAdminResultTableNode& In
        ,FString& OutResultItem
        ,int32& OutWeight
	)
{
    
	OutResultItem = In.Data.ResultItem;
	OutWeight = In.Data.Weight;
	
}

void UPFAdminProxyLibrary::BreakBPAdminResultTableNodeType(
		const FBPAdminResultTableNodeType& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminRevokeInventoryItemRequest(
		const FBPAdminRevokeInventoryItemRequest& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
        ,FString& OutItemInstanceId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	OutItemInstanceId = In.Data.ItemInstanceId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminRevokeInventoryResult(
		const FBPAdminRevokeInventoryResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminSendAccountRecoveryEmailRequest(
		const FBPAdminSendAccountRecoveryEmailRequest& In
        ,FString& OutEmail
	)
{
    OutEmail = In.Data.Email;
	
}

void UPFAdminProxyLibrary::BreakBPAdminSendAccountRecoveryEmailResult(
		const FBPAdminSendAccountRecoveryEmailResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminSetPublishedRevisionRequest(
		const FBPAdminSetPublishedRevisionRequest& In
        ,int32& OutVersion
        ,int32& OutRevision
	)
{
    OutVersion = In.Data.Version;
	OutRevision = In.Data.Revision;
	
}

void UPFAdminProxyLibrary::BreakBPAdminSetPublishedRevisionResult(
		const FBPAdminSetPublishedRevisionResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminSetPublisherDataRequest(
		const FBPAdminSetPublisherDataRequest& In
        ,FString& OutKey
        ,FString& OutValue
	)
{
    OutKey = In.Data.Key;
	OutValue = In.Data.Value;
	
}

void UPFAdminProxyLibrary::BreakBPAdminSetPublisherDataResult(
		const FBPAdminSetPublisherDataResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminSetTitleDataRequest(
		const FBPAdminSetTitleDataRequest& In
        ,FString& OutKey
        ,FString& OutValue
	)
{
    OutKey = In.Data.Key;
	OutValue = In.Data.Value;
	
}

void UPFAdminProxyLibrary::BreakBPAdminSetTitleDataResult(
		const FBPAdminSetTitleDataResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminSetupPushNotificationRequest(
		const FBPAdminSetupPushNotificationRequest& In
        ,FString& OutName
        ,FString& OutPlatform
        ,FString& OutKey
        ,FString& OutCredential
        ,bool& OutOverwriteOldARN
	)
{
    OutName = In.Data.Name;
	OutPlatform = In.Data.Platform;
	OutKey = In.Data.Key;
	OutCredential = In.Data.Credential;
	OutOverwriteOldARN = In.Data.OverwriteOldARN;
	
}

void UPFAdminProxyLibrary::BreakBPAdminSetupPushNotificationResult(
		const FBPAdminSetupPushNotificationResult& In
        ,FString& OutARN
	)
{
    OutARN = In.Data.ARN;
	
}

void UPFAdminProxyLibrary::BreakBPAdminStoreItem(
		const FBPAdminStoreItem& In
        ,FString& OutItemId
	)
{
    OutItemId = In.Data.ItemId;
	
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminSubtractUserVirtualCurrencyRequest(
		const FBPAdminSubtractUserVirtualCurrencyRequest& In
        ,FString& OutPlayFabId
        ,FString& OutVirtualCurrency
        ,int32& OutAmount
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutVirtualCurrency = In.Data.VirtualCurrency;
	OutAmount = In.Data.Amount;
	
}

void UPFAdminProxyLibrary::BreakBPAdminTitleActivationStatus(
		const FBPAdminTitleActivationStatus& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateCatalogItemsRequest(
		const FBPAdminUpdateCatalogItemsRequest& In
        ,FString& OutCatalogVersion
        ,TArray<FBPAdminCatalogItem>& OutCatalog
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	for (const PlayFab::AdminModels::FCatalogItem& elem : In.Data.Catalog)
    {
        FBPAdminCatalogItem result;
        result.Data = elem;
        OutCatalog.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateCatalogItemsResult(
		const FBPAdminUpdateCatalogItemsResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateCloudScriptRequest(
		const FBPAdminUpdateCloudScriptRequest& In
        ,int32& OutVersion
        ,TArray<FBPAdminCloudScriptFile>& OutFiles
	)
{
    OutVersion = In.Data.Version;
	for (const PlayFab::AdminModels::FCloudScriptFile& elem : In.Data.Files)
    {
        FBPAdminCloudScriptFile result;
        result.Data = elem;
        OutFiles.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateCloudScriptResult(
		const FBPAdminUpdateCloudScriptResult& In
        ,int32& OutVersion
        ,int32& OutRevision
	)
{
    OutVersion = In.Data.Version;
	OutRevision = In.Data.Revision;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateRandomResultTablesRequest(
		const FBPAdminUpdateRandomResultTablesRequest& In
        ,FString& OutCatalogVersion
        ,TArray<FBPAdminRandomResultTable>& OutTables
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	for (const PlayFab::AdminModels::FRandomResultTable& elem : In.Data.Tables)
    {
        FBPAdminRandomResultTable result;
        result.Data = elem;
        OutTables.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateRandomResultTablesResult(
		const FBPAdminUpdateRandomResultTablesResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateStoreItemsRequest(
		const FBPAdminUpdateStoreItemsRequest& In
        ,FString& OutCatalogVersion
        ,FString& OutStoreId
        ,TArray<FBPAdminStoreItem>& OutStore
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	OutStoreId = In.Data.StoreId;
	for (const PlayFab::AdminModels::FStoreItem& elem : In.Data.Store)
    {
        FBPAdminStoreItem result;
        result.Data = elem;
        OutStore.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateStoreItemsResult(
		const FBPAdminUpdateStoreItemsResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateUserDataRequest(
		const FBPAdminUpdateUserDataRequest& In
        ,FString& OutPlayFabId
        ,TArray<FString>& OutKeysToRemove
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	
	OutKeysToRemove = In.Data.KeysToRemove;
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateUserDataResult(
		const FBPAdminUpdateUserDataResult& In
        ,int32& OutDataVersion
	)
{
    OutDataVersion = In.Data.DataVersion;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateUserInternalDataRequest(
		const FBPAdminUpdateUserInternalDataRequest& In
        ,FString& OutPlayFabId
        ,TArray<FString>& OutKeysToRemove
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	
	OutKeysToRemove = In.Data.KeysToRemove;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateUserTitleDisplayNameRequest(
		const FBPAdminUpdateUserTitleDisplayNameRequest& In
        ,FString& OutPlayFabId
        ,FString& OutDisplayName
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutDisplayName = In.Data.DisplayName;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateUserTitleDisplayNameResult(
		const FBPAdminUpdateUserTitleDisplayNameResult& In
        ,FString& OutDisplayName
	)
{
    OutDisplayName = In.Data.DisplayName;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUserAccountInfo(
		const FBPAdminUserAccountInfo& In
        ,FString& OutPlayFabId
        ,FDateTime& OutCreated
        ,FString& OutUsername
        ,FBPAdminUserTitleInfo& OutTitleInfo
        ,FBPAdminUserPrivateAccountInfo& OutPrivateInfo
        ,FBPAdminUserFacebookInfo& OutFacebookInfo
        ,FBPAdminUserSteamInfo& OutSteamInfo
        ,FBPAdminUserGameCenterInfo& OutGameCenterInfo
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	
	OutUsername = In.Data.Username;
	if (In.Data.TitleInfo.IsValid()) {    OutTitleInfo.Data = *In.Data.TitleInfo;}
	if (In.Data.PrivateInfo.IsValid()) {    OutPrivateInfo.Data = *In.Data.PrivateInfo;}
	if (In.Data.FacebookInfo.IsValid()) {    OutFacebookInfo.Data = *In.Data.FacebookInfo;}
	if (In.Data.SteamInfo.IsValid()) {    OutSteamInfo.Data = *In.Data.SteamInfo;}
	if (In.Data.GameCenterInfo.IsValid()) {    OutGameCenterInfo.Data = *In.Data.GameCenterInfo;}
	
}

void UPFAdminProxyLibrary::BreakBPAdminUserCredentials(
		const FBPAdminUserCredentials& In
        ,FString& OutUsername
        ,FString& OutPassword
	)
{
    OutUsername = In.Data.Username;
	OutPassword = In.Data.Password;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUserDataPermission(
		const FBPAdminUserDataPermission& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminUserDataRecord(
		const FBPAdminUserDataRecord& In
        ,FString& OutValue
        ,FDateTime& OutLastUpdated
	)
{
    OutValue = In.Data.Value;
	
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminUserFacebookInfo(
		const FBPAdminUserFacebookInfo& In
        ,FString& OutFacebookId
        ,FString& OutFullName
	)
{
    OutFacebookId = In.Data.FacebookId;
	OutFullName = In.Data.FullName;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUserGameCenterInfo(
		const FBPAdminUserGameCenterInfo& In
        ,FString& OutGameCenterId
	)
{
    OutGameCenterId = In.Data.GameCenterId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUserOrigination(
		const FBPAdminUserOrigination& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminUserPrivateAccountInfo(
		const FBPAdminUserPrivateAccountInfo& In
        ,FString& OutEmail
	)
{
    OutEmail = In.Data.Email;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUserSteamInfo(
		const FBPAdminUserSteamInfo& In
        ,FString& OutSteamId
        ,FString& OutSteamCountry
	)
{
    OutSteamId = In.Data.SteamId;
	OutSteamCountry = In.Data.SteamCountry;
	
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminUserTitleInfo(
		const FBPAdminUserTitleInfo& In
        ,FString& OutDisplayName
        ,FDateTime& OutCreated
        ,FDateTime& OutLastLogin
        ,FDateTime& OutFirstLogin
        ,bool& OutisBanned
	)
{
    OutDisplayName = In.Data.DisplayName;
	
	
	
	
	OutisBanned = In.Data.isBanned;
	
}

void UPFAdminProxyLibrary::BreakBPAdminVirtualCurrencyData(
		const FBPAdminVirtualCurrencyData& In
        ,FString& OutCurrencyCode
        ,FString& OutDisplayName
        ,int32& OutInitialDeposit
        ,int32& OutRechargeRate
        ,int32& OutRechargeMax
	)
{
    OutCurrencyCode = In.Data.CurrencyCode;
	OutDisplayName = In.Data.DisplayName;
	OutInitialDeposit = In.Data.InitialDeposit;
	OutRechargeRate = In.Data.RechargeRate;
	OutRechargeMax = In.Data.RechargeMax;
	
}

void UPFAdminProxyLibrary::BreakBPAdminVirtualCurrencyRechargeTime(
		const FBPAdminVirtualCurrencyRechargeTime& In
        ,int32& OutSecondsToRecharge
        ,FDateTime& OutRechargeTime
        ,int32& OutRechargeMax
	)
{
    OutSecondsToRecharge = In.Data.SecondsToRecharge;
	
	OutRechargeMax = In.Data.RechargeMax;
	
}

