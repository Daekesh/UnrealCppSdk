// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabProxyPrivatePCH.h"
#include "PlayFab.h"
#include "PFAdminDeleteUsers.h"

UPFAdminDeleteUsers::UPFAdminDeleteUsers(const FObjectInitializer& ObjectInitializer)
	: Super(ObjectInitializer)
	, SuccessDelegate(PlayFab::UPlayFabAdminAPI::FDeleteUsersDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
	, ErrorDelegate(PlayFab::FPlayFabErrorDelegate::CreateUObject(this, &ThisClass::OnErrorCallback))
{
}

UPFAdminDeleteUsers* UPFAdminDeleteUsers::DeleteUsers(UObject* WorldContextObject, class APlayerController* PlayerController , const TArray<FString>& InPlayFabIds, const FString& InTitleId)
{
	UPFAdminDeleteUsers* Proxy = NewObject<UPFAdminDeleteUsers>();
 	//Proxy->PlayerControllerWeakPtr = PlayerController;
	Proxy->Request.PlayFabIds = InPlayFabIds;
	Proxy->Request.TitleId = InTitleId;
	

 	//Proxy->WorldContextObject = WorldContextObject;
	return Proxy;
}

void UPFAdminDeleteUsers::Activate()
{
	// grab the module, so we can get a valid pointer to the client API 
	PlayFabAdminPtr AdminAPI = IPlayFabModuleInterface::Get().GetAdminAPI();

	bool CallResult = false;

	if(AdminAPI.IsValid())
	{	
		CallResult = AdminAPI->DeleteUsers(Request, SuccessDelegate, ErrorDelegate);
	}

	if(CallResult == false)
	{
		OnFailure.Broadcast();
	}
}


//////////////////////////////////////////////////////////////////////////
// Delegate handles
void UPFAdminDeleteUsers::OnSuccessCallback(const PlayFab::AdminModels::FDeleteUsersResult& Result)
{
	OnSuccess.Broadcast();
}

void UPFAdminDeleteUsers::OnErrorCallback(const PlayFab::FPlayFabError& InError)
{
	OnFailure.Broadcast();	
}
