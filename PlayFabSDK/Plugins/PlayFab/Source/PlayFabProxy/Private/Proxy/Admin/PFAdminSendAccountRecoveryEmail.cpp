// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabProxyPrivatePCH.h"
#include "PFAdminSendAccountRecoveryEmail.h"

UPFAdminSendAccountRecoveryEmail::UPFAdminSendAccountRecoveryEmail(const FObjectInitializer& ObjectInitializer)
	: Super(ObjectInitializer)
	, SuccessDelegate(PlayFab::UPlayFabAdminAPI::FSendAccountRecoveryEmailDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
	, ErrorDelegate(PlayFab::FPlayFabErrorDelegate::CreateUObject(this, &ThisClass::OnErrorCallback))
{
}

UPFAdminSendAccountRecoveryEmail* UPFAdminSendAccountRecoveryEmail::SendAccountRecoveryEmail(UObject* WorldContextObject, class APlayerController* PlayerController , const FString& InEmail)
{
	UPFAdminSendAccountRecoveryEmail* Proxy = NewObject<UPFAdminSendAccountRecoveryEmail>();
 	//Proxy->PlayerControllerWeakPtr = PlayerController;
	Proxy->Request.Email = InEmail;
	

 	//Proxy->WorldContextObject = WorldContextObject;
	return Proxy;
}

void UPFAdminSendAccountRecoveryEmail::Activate()
{
	// grab the module, so we can get a valid pointer to the client API 
	PlayFabAdminPtr AdminAPI = IPlayFabModuleInterface::Get().GetAdminAPI();

	bool CallResult = false;

	if(AdminAPI.IsValid())
	{	
		CallResult = AdminAPI->SendAccountRecoveryEmail(Request, SuccessDelegate, ErrorDelegate);
	}

	if(CallResult == false)
	{
		OnFailure.Broadcast();
	}
}


//////////////////////////////////////////////////////////////////////////
// Delegate handles
void UPFAdminSendAccountRecoveryEmail::OnSuccessCallback(const PlayFab::AdminModels::FSendAccountRecoveryEmailResult& Result)
{
	OnSuccess.Broadcast();
}

void UPFAdminSendAccountRecoveryEmail::OnErrorCallback(const PlayFab::FPlayFabError& InError)
{
	OnFailure.Broadcast();	
}
