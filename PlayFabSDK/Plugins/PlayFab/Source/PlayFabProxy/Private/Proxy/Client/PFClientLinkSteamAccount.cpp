// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabProxyPrivatePCH.h"
#include "PlayFab.h"
#include "PFClientLinkSteamAccount.h"

UPFClientLinkSteamAccount::UPFClientLinkSteamAccount(const FObjectInitializer& ObjectInitializer)
	: Super(ObjectInitializer)
	, SuccessDelegate(PlayFab::UPlayFabClientAPI::FLinkSteamAccountDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
	, ErrorDelegate(PlayFab::FPlayFabErrorDelegate::CreateUObject(this, &ThisClass::OnErrorCallback))
{
}

UPFClientLinkSteamAccount* UPFClientLinkSteamAccount::LinkSteamAccount(UObject* WorldContextObject, class APlayerController* PlayerController , const FString& InSteamTicket)
{
	UPFClientLinkSteamAccount* Proxy = NewObject<UPFClientLinkSteamAccount>();
 	//Proxy->PlayerControllerWeakPtr = PlayerController;
	Proxy->Request.SteamTicket = InSteamTicket;
	

 	//Proxy->WorldContextObject = WorldContextObject;
	return Proxy;
}

void UPFClientLinkSteamAccount::Activate()
{
	// grab the module, so we can get a valid pointer to the client API 
	PlayFabClientPtr ClientAPI = IPlayFabModuleInterface::Get().GetClientAPI();

	bool CallResult = false;

	if(ClientAPI.IsValid())
	{	
		CallResult = ClientAPI->LinkSteamAccount(Request, SuccessDelegate, ErrorDelegate);
	}

	if(CallResult == false)
	{
		OnFailure.Broadcast();
	}
}


//////////////////////////////////////////////////////////////////////////
// Delegate handles
void UPFClientLinkSteamAccount::OnSuccessCallback(const PlayFab::ClientModels::FLinkSteamAccountResult& Result)
{
	OnSuccess.Broadcast();
}

void UPFClientLinkSteamAccount::OnErrorCallback(const PlayFab::FPlayFabError& InError)
{
	OnFailure.Broadcast();	
}
