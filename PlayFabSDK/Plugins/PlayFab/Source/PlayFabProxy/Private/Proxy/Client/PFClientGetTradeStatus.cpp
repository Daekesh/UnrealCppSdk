// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabProxyPrivatePCH.h"
#include "PlayFab.h"
#include "PFClientGetTradeStatus.h"

UPFClientGetTradeStatus::UPFClientGetTradeStatus(const FObjectInitializer& ObjectInitializer)
	: Super(ObjectInitializer)
	, SuccessDelegate(PlayFab::UPlayFabClientAPI::FGetTradeStatusDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
	, ErrorDelegate(PlayFab::FPlayFabErrorDelegate::CreateUObject(this, &ThisClass::OnErrorCallback))
{
}

UPFClientGetTradeStatus* UPFClientGetTradeStatus::GetTradeStatus(UObject* WorldContextObject, class APlayerController* PlayerController , const FString& InOfferingPlayerId, const FString& InTradeId)
{
	UPFClientGetTradeStatus* Proxy = NewObject<UPFClientGetTradeStatus>();
 	//Proxy->PlayerControllerWeakPtr = PlayerController;
	Proxy->Request.OfferingPlayerId = InOfferingPlayerId;
	Proxy->Request.TradeId = InTradeId;
	

 	//Proxy->WorldContextObject = WorldContextObject;
	return Proxy;
}

void UPFClientGetTradeStatus::Activate()
{
	// grab the module, so we can get a valid pointer to the client API 
	PlayFabClientPtr ClientAPI = IPlayFabModuleInterface::Get().GetClientAPI();

	bool CallResult = false;

	if(ClientAPI.IsValid())
	{	
		CallResult = ClientAPI->GetTradeStatus(Request, SuccessDelegate, ErrorDelegate);
	}

	if(CallResult == false)
	{
		FBPClientGetTradeStatusResponse BPResult;
 		OnFailure.Broadcast(BPResult);
	}
}


//////////////////////////////////////////////////////////////////////////
// Delegate handles
void UPFClientGetTradeStatus::OnSuccessCallback(const PlayFab::ClientModels::FGetTradeStatusResponse& Result)
{
	FBPClientGetTradeStatusResponse BPResult;
 	BPResult.Data = Result;
 	OnSuccess.Broadcast(BPResult);
}

void UPFClientGetTradeStatus::OnErrorCallback(const PlayFab::FPlayFabError& InError)
{
	FBPClientGetTradeStatusResponse BPResult;
 	OnFailure.Broadcast(BPResult);	
}
