// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabProxyPrivatePCH.h"
#include "PFClientGetPlayFabIDsFromPSNAccountIDs.h"

UPFClientGetPlayFabIDsFromPSNAccountIDs::UPFClientGetPlayFabIDsFromPSNAccountIDs(const FObjectInitializer& ObjectInitializer)
	: Super(ObjectInitializer)
	, SuccessDelegate(PlayFab::UPlayFabClientAPI::FGetPlayFabIDsFromPSNAccountIDsDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
	, ErrorDelegate(PlayFab::FPlayFabErrorDelegate::CreateUObject(this, &ThisClass::OnErrorCallback))
{
}

UPFClientGetPlayFabIDsFromPSNAccountIDs* UPFClientGetPlayFabIDsFromPSNAccountIDs::GetPlayFabIDsFromPSNAccountIDs(UObject* WorldContextObject, class APlayerController* PlayerController , const TArray<FString>& InPSNAccountIDs, const int32& InIssuerId)
{
	UPFClientGetPlayFabIDsFromPSNAccountIDs* Proxy = NewObject<UPFClientGetPlayFabIDsFromPSNAccountIDs>();
 	//Proxy->PlayerControllerWeakPtr = PlayerController;
	Proxy->Request.PSNAccountIDs = InPSNAccountIDs;
	Proxy->Request.IssuerId = InIssuerId;
	

 	//Proxy->WorldContextObject = WorldContextObject;
	return Proxy;
}

void UPFClientGetPlayFabIDsFromPSNAccountIDs::Activate()
{
	// grab the module, so we can get a valid pointer to the client API 
	PlayFabClientPtr ClientAPI = IPlayFabModuleInterface::Get().GetClientAPI();

	bool CallResult = false;

	if(ClientAPI.IsValid())
	{	
		CallResult = ClientAPI->GetPlayFabIDsFromPSNAccountIDs(Request, SuccessDelegate, ErrorDelegate);
	}

	if(CallResult == false)
	{
		FBPClientGetPlayFabIDsFromPSNAccountIDsResult BPResult;
 		OnFailure.Broadcast(BPResult);
	}
}


//////////////////////////////////////////////////////////////////////////
// Delegate handles
void UPFClientGetPlayFabIDsFromPSNAccountIDs::OnSuccessCallback(const PlayFab::ClientModels::FGetPlayFabIDsFromPSNAccountIDsResult& Result)
{
	FBPClientGetPlayFabIDsFromPSNAccountIDsResult BPResult;
 	BPResult.Data = Result;
 	OnSuccess.Broadcast(BPResult);
}

void UPFClientGetPlayFabIDsFromPSNAccountIDs::OnErrorCallback(const PlayFab::FPlayFabError& InError)
{
	FBPClientGetPlayFabIDsFromPSNAccountIDsResult BPResult;
 	OnFailure.Broadcast(BPResult);	
}
