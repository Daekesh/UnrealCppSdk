// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabProxyPrivatePCH.h"
#include "PlayFab.h"
#include "PFServerConsumeItem.h"

UPFServerConsumeItem::UPFServerConsumeItem(const FObjectInitializer& ObjectInitializer)
	: Super(ObjectInitializer)
	, SuccessDelegate(PlayFab::UPlayFabServerAPI::FConsumeItemDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
	, ErrorDelegate(PlayFab::FPlayFabErrorDelegate::CreateUObject(this, &ThisClass::OnErrorCallback))
{
}

UPFServerConsumeItem* UPFServerConsumeItem::ConsumeItem(UObject* WorldContextObject, class APlayerController* PlayerController , const FString& InPlayFabId, const FString& InItemInstanceId, const int32& InConsumeCount, const FString& InCharacterId)
{
	UPFServerConsumeItem* Proxy = NewObject<UPFServerConsumeItem>();
 	//Proxy->PlayerControllerWeakPtr = PlayerController;
	Proxy->Request.PlayFabId = InPlayFabId;
	Proxy->Request.ItemInstanceId = InItemInstanceId;
	Proxy->Request.ConsumeCount = InConsumeCount;
	Proxy->Request.CharacterId = InCharacterId;
	

 	//Proxy->WorldContextObject = WorldContextObject;
	return Proxy;
}

void UPFServerConsumeItem::Activate()
{
	// grab the module, so we can get a valid pointer to the client API 
	PlayFabServerPtr ServerAPI = IPlayFabModuleInterface::Get().GetServerAPI();

	bool CallResult = false;

	if(ServerAPI.IsValid())
	{	
		CallResult = ServerAPI->ConsumeItem(Request, SuccessDelegate, ErrorDelegate);
	}

	if(CallResult == false)
	{
		FBPServerConsumeItemResult BPResult;
 		OnFailure.Broadcast(BPResult);
	}
}


//////////////////////////////////////////////////////////////////////////
// Delegate handles
void UPFServerConsumeItem::OnSuccessCallback(const PlayFab::ServerModels::FConsumeItemResult& Result)
{
	FBPServerConsumeItemResult BPResult;
 	BPResult.Data = Result;
 	OnSuccess.Broadcast(BPResult);
}

void UPFServerConsumeItem::OnErrorCallback(const PlayFab::FPlayFabError& InError)
{
	FBPServerConsumeItemResult BPResult;
 	OnFailure.Broadcast(BPResult);	
}
