// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabProxyPrivatePCH.h"
#include "PlayFab.h"
#include "PFServerEvaluateRandomResultTable.h"

UPFServerEvaluateRandomResultTable::UPFServerEvaluateRandomResultTable(const FObjectInitializer& ObjectInitializer)
	: Super(ObjectInitializer)
	, SuccessDelegate(PlayFab::UPlayFabServerAPI::FEvaluateRandomResultTableDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
	, ErrorDelegate(PlayFab::FPlayFabErrorDelegate::CreateUObject(this, &ThisClass::OnErrorCallback))
{
}

UPFServerEvaluateRandomResultTable* UPFServerEvaluateRandomResultTable::EvaluateRandomResultTable(UObject* WorldContextObject, class APlayerController* PlayerController , const FString& InTableId, const FString& InCatalogVersion)
{
	UPFServerEvaluateRandomResultTable* Proxy = NewObject<UPFServerEvaluateRandomResultTable>();
 	//Proxy->PlayerControllerWeakPtr = PlayerController;
	Proxy->Request.TableId = InTableId;
	Proxy->Request.CatalogVersion = InCatalogVersion;
	

 	//Proxy->WorldContextObject = WorldContextObject;
	return Proxy;
}

void UPFServerEvaluateRandomResultTable::Activate()
{
	// grab the module, so we can get a valid pointer to the client API 
	PlayFabServerPtr ServerAPI = IPlayFabModuleInterface::Get().GetServerAPI();

	bool CallResult = false;

	if(ServerAPI.IsValid())
	{	
		CallResult = ServerAPI->EvaluateRandomResultTable(Request, SuccessDelegate, ErrorDelegate);
	}

	if(CallResult == false)
	{
		FBPServerEvaluateRandomResultTableResult BPResult;
 		OnFailure.Broadcast(BPResult);
	}
}


//////////////////////////////////////////////////////////////////////////
// Delegate handles
void UPFServerEvaluateRandomResultTable::OnSuccessCallback(const PlayFab::ServerModels::FEvaluateRandomResultTableResult& Result)
{
	FBPServerEvaluateRandomResultTableResult BPResult;
 	BPResult.Data = Result;
 	OnSuccess.Broadcast(BPResult);
}

void UPFServerEvaluateRandomResultTable::OnErrorCallback(const PlayFab::FPlayFabError& InError)
{
	FBPServerEvaluateRandomResultTableResult BPResult;
 	OnFailure.Broadcast(BPResult);	
}
