// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabProxyPrivatePCH.h"
#include "PlayFab.h"
#include "PFServerUnlockContainerInstance.h"

UPFServerUnlockContainerInstance::UPFServerUnlockContainerInstance(const FObjectInitializer& ObjectInitializer)
	: Super(ObjectInitializer)
	, SuccessDelegate(PlayFab::UPlayFabServerAPI::FUnlockContainerInstanceDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
	, ErrorDelegate(PlayFab::FPlayFabErrorDelegate::CreateUObject(this, &ThisClass::OnErrorCallback))
{
}

UPFServerUnlockContainerInstance* UPFServerUnlockContainerInstance::UnlockContainerInstance(UObject* WorldContextObject, class APlayerController* PlayerController , const FString& InPlayFabId, const FString& InCharacterId, const FString& InContainerItemInstanceId, const FString& InKeyItemInstanceId, const FString& InCatalogVersion)
{
	UPFServerUnlockContainerInstance* Proxy = NewObject<UPFServerUnlockContainerInstance>();
 	//Proxy->PlayerControllerWeakPtr = PlayerController;
	Proxy->Request.PlayFabId = InPlayFabId;
	Proxy->Request.CharacterId = InCharacterId;
	Proxy->Request.ContainerItemInstanceId = InContainerItemInstanceId;
	Proxy->Request.KeyItemInstanceId = InKeyItemInstanceId;
	Proxy->Request.CatalogVersion = InCatalogVersion;
	

 	//Proxy->WorldContextObject = WorldContextObject;
	return Proxy;
}

void UPFServerUnlockContainerInstance::Activate()
{
	// grab the module, so we can get a valid pointer to the client API 
	PlayFabServerPtr ServerAPI = IPlayFabModuleInterface::Get().GetServerAPI();

	bool CallResult = false;

	if(ServerAPI.IsValid())
	{	
		CallResult = ServerAPI->UnlockContainerInstance(Request, SuccessDelegate, ErrorDelegate);
	}

	if(CallResult == false)
	{
		FBPServerUnlockContainerItemResult BPResult;
 		OnFailure.Broadcast(BPResult);
	}
}


//////////////////////////////////////////////////////////////////////////
// Delegate handles
void UPFServerUnlockContainerInstance::OnSuccessCallback(const PlayFab::ServerModels::FUnlockContainerItemResult& Result)
{
	FBPServerUnlockContainerItemResult BPResult;
 	BPResult.Data = Result;
 	OnSuccess.Broadcast(BPResult);
}

void UPFServerUnlockContainerInstance::OnErrorCallback(const PlayFab::FPlayFabError& InError)
{
	FBPServerUnlockContainerItemResult BPResult;
 	OnFailure.Broadcast(BPResult);	
}
